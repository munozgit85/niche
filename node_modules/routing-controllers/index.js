"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var MetadataArgsStorage_1 = require("./metadata-builder/MetadataArgsStorage");
var DirectoryExportedClassesLoader_1 = require("./util/DirectoryExportedClassesLoader");
var RoutingControllerExecutor_1 = require("./RoutingControllerExecutor");
var ExpressDriver_1 = require("./driver/ExpressDriver");
var KoaDriver_1 = require("./driver/KoaDriver");
var container_1 = require("./container");
// -------------------------------------------------------------------------
// Main Functions
// -------------------------------------------------------------------------
/**
 * Registers all loaded actions in your express application.
 */
function useExpressServer(expressApp, options) {
    createExecutor(new ExpressDriver_1.ExpressDriver(expressApp), options || {});
    return expressApp;
}
exports.useExpressServer = useExpressServer;
/**
 * Registers all loaded actions in your express application.
 */
function createExpressServer(options) {
    var driver = new ExpressDriver_1.ExpressDriver();
    createExecutor(driver, options || {});
    return driver.express;
}
exports.createExpressServer = createExpressServer;
/**
 * Registers all loaded actions in your koa application.
 */
function useKoaServer(koaApp, options) {
    createExecutor(new KoaDriver_1.KoaDriver(koaApp), options || {});
    return koaApp;
}
exports.useKoaServer = useKoaServer;
/**
 * Registers all loaded actions in your koa application.
 */
function createKoaServer(options) {
    var driver = new KoaDriver_1.KoaDriver();
    createExecutor(driver, options || {});
    return driver.koa;
}
exports.createKoaServer = createKoaServer;
/**
 * Registers all loaded actions in your express application.
 */
function createExecutor(driver, options) {
    // import all controllers and middlewares and error handlers (new way)
    if (options && options.controllers && options.controllers.length)
        DirectoryExportedClassesLoader_1.importClassesFromDirectories(options.controllers);
    if (options && options.middlewares && options.middlewares.length)
        DirectoryExportedClassesLoader_1.importClassesFromDirectories(options.middlewares);
    if (options && options.interceptors && options.interceptors.length)
        DirectoryExportedClassesLoader_1.importClassesFromDirectories(options.interceptors);
    // import all controllers and middlewares and error handlers (deprecated way)
    if (options && options.controllerDirs && options.controllerDirs.length)
        DirectoryExportedClassesLoader_1.importClassesFromDirectories(options.controllerDirs);
    if (options && options.middlewareDirs && options.middlewareDirs.length)
        DirectoryExportedClassesLoader_1.importClassesFromDirectories(options.middlewareDirs);
    if (options && options.interceptorDirs && options.interceptorDirs.length)
        DirectoryExportedClassesLoader_1.importClassesFromDirectories(options.interceptorDirs);
    if (options && options.developmentMode !== undefined) {
        driver.developmentMode = options.developmentMode;
    }
    else {
        driver.developmentMode = process.env.NODE_ENV !== "production";
    }
    if (options.defaultErrorHandler !== undefined) {
        driver.isDefaultErrorHandlingEnabled = options.defaultErrorHandler;
    }
    else {
        driver.isDefaultErrorHandlingEnabled = true;
    }
    if (options.useClassTransformer !== undefined) {
        driver.useClassTransformer = options.useClassTransformer;
    }
    else {
        driver.useClassTransformer = true;
    }
    driver.classToPlainTransformOptions = options.classToPlainTransformOptions;
    driver.plainToClassTransformOptions = options.plainToClassTransformOptions;
    if (options.errorOverridingMap !== undefined)
        driver.errorOverridingMap = options.errorOverridingMap;
    if (options.routePrefix !== undefined)
        driver.routePrefix = options.routePrefix;
    // next create a controller executor
    new RoutingControllerExecutor_1.RoutingControllerExecutor(driver)
        .bootstrap()
        .registerMiddlewares(false)
        .registerActions()
        .registerMiddlewares(true); // todo: register only for loaded controllers?
}
// -------------------------------------------------------------------------
// Global Metadata Storage
// -------------------------------------------------------------------------
/**
 * Gets the metadata arguments storage.
 */
function defaultMetadataArgsStorage() {
    return container_1.getFromContainer(MetadataArgsStorage_1.MetadataArgsStorage);
}
exports.defaultMetadataArgsStorage = defaultMetadataArgsStorage;
// -------------------------------------------------------------------------
// Commonly Used exports
// -------------------------------------------------------------------------
__export(require("./container"));
__export(require("./decorator/controllers"));
__export(require("./decorator/decorators"));
__export(require("./decorator/methods"));
__export(require("./decorator/params"));
__export(require("./error"));
__export(require("./error/http/HttpError"));
__export(require("./error/http/InternalServerError"));
__export(require("./error/http/BadRequestError"));
__export(require("./error/http/ForbiddenError"));
__export(require("./error/http/NotAcceptableError"));
__export(require("./error/http/MethodNotAllowedError"));
__export(require("./error/http/NotFoundError"));
__export(require("./error/http/UnauthorizedError"));

//# sourceMappingURL=index.js.map
