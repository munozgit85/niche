{"version":3,"sources":["../../src/driver/ExpressDriver.ts"],"names":[],"mappings":";;;;;;AAGA,kEAA+D;AAC/D,2DAAwD;AACxD,6DAA0D;AAE1D,uDAAsE;AAGtE,2CAAwC;AAIxC,IAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAEjC;;GAEG;AACH;IAAmC,iCAAU;IAEzC,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,uBAAmB,OAAa;QAAhC,YACI,iBAAO,SAYV;QAbkB,aAAO,GAAP,OAAO,CAAM;QAE5B,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACV,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACX,IAAI,CAAC;oBACD,KAAI,CAAC,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC;gBACxC,CAAC;gBAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACT,MAAM,IAAI,KAAK,CAAC,wFAAwF,CAAC,CAAC;gBAC9G,CAAC;YACL,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;QACtF,CAAC;;IACL,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E,iCAAS,GAAT;IACA,CAAC;IAED;;OAEG;IACH,4CAAoB,GAApB,UAAqB,UAA8B;QAC/C,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,oBAAoB,CAAC,KAAK,CAAC;YACvC,MAAM,CAAC;QAEX,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,KAAU,EAAE,OAAY,EAAE,QAAa,EAAE,IAAwB;YACxF,UAAU,CAAC,oBAAoB,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACH,0CAAkB,GAAlB,UAAmB,UAA8B;QAAjD,iBA0BC;QAzBG,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC;YACzB,MAAM,CAAC;QAEX,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,OAAY,EAAE,QAAa,EAAE,IAAuB;YAElE,IAAI,CAAC;gBACD,IAAM,SAAS,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;gBACnE,EAAE,CAAC,CAAC,SAAS,YAAY,OAAO,CAAC,CAAC,CAAC;oBAC/B,SAAS,CAAC,KAAK,CAAC,UAAC,KAAU;wBACvB,KAAI,CAAC,WAAW,CAAC,KAAK,EAAE,SAAS,EAAE;4BAC/B,OAAO,EAAE,OAAO;4BAChB,QAAQ,EAAE,QAAQ;4BAClB,IAAI,EAAE,IAAI;yBACb,CAAC,CAAC;oBACP,CAAC,CAAC,CAAC;gBACP,CAAC;YAEL,CAAC;YAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACb,KAAI,CAAC,WAAW,CAAC,KAAK,EAAE,SAAS,EAAE;oBAC/B,OAAO,EAAE,OAAO;oBAChB,QAAQ,EAAE,QAAQ;oBAClB,IAAI,EAAE,IAAI;iBACb,CAAC,CAAC;YACP,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACH,sCAAc,GAAd,UAAe,MAAsB,EACtB,WAAiC,EACjC,YAAmC,EACnC,eAAwD;QACnE,IAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QAChD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;YAC7B,MAAM,IAAI,uCAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAE9C,IAAM,eAAe,GAAG,MAAM,CAAC,kBAAkB,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QACjG,IAAM,uBAAuB,GAAG,IAAI,CAAC,kBAAkB,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;QACvF,IAAM,qBAAqB,GAAe,YAAY;aACjD,MAAM,CAAC,UAAA,WAAW,IAAI,OAAA,WAAW,CAAC,QAAQ,EAApB,CAAoB,CAAC;aAC3C,IAAI,CAAC,UAAC,YAAY,EAAE,YAAY,IAAK,OAAA,YAAY,CAAC,QAAQ,GAAG,YAAY,CAAC,QAAQ,EAA7C,CAA6C,CAAC;aACnF,OAAO,EAAE;aACT,GAAG,CAAC,UAAA,WAAW;YACZ,MAAM,CAAC,UAAU,OAAY,EAAE,QAAa,EAAE,MAAW;gBACrD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;YACrE,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;QAEP,IAAM,YAAY,GAAG,sBAAsB,OAAY,EAAE,QAAa,EAAE,IAAc;YAClF,IAAM,OAAO,GAA0B;gBACnC,OAAO,EAAE,OAAO;gBAChB,QAAQ,EAAE,QAAQ;gBAClB,IAAI,EAAE,IAAI;gBACV,uBAAuB,EAAE,qBAAqB,CAAC,MAAM,CAAC,uBAAuB,CAAC;aACjF,CAAC;YACF,eAAe,CAAC,OAAO,CAAC,CAAC;QAC7B,CAAC,CAAC;QAEF,IAAM,kBAAkB,GAAU,EAAE,CAAC;QACrC,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;gBACrB,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;YAC1D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;YAC1D,CAAC;QACL,CAAC;QACD,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,IAAI,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;YAC1C,IAAM,QAAM,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YACjC,MAAM,CAAC,MAAM;iBACR,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,KAAK,uBAAU,CAAC,aAAa,EAAvC,CAAuC,CAAC;iBACxD,OAAO,CAAC,UAAA,KAAK;gBACV,kBAAkB,CAAC,IAAI,CAAC,QAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YAC3E,CAAC,CAAC,CAAC;YACP,MAAM,CAAC,MAAM;iBACR,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,KAAK,uBAAU,CAAC,cAAc,EAAxC,CAAwC,CAAC;iBACzD,OAAO,CAAC,UAAA,KAAK;gBACV,kBAAkB,CAAC,IAAI,CAAC,QAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YAC1E,CAAC,CAAC,CAAC;QACX,CAAC;QAED,IAAM,IAAI,GAAG,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAChE,IAAM,SAAS,GAAG,MAAM,CAAC,SAAS,YAAY,MAAM;cAC9C,+BAAc,CAAC,4BAA4B,CAAC,MAAM,CAAC,SAAmB,EAAE,IAAI,CAAC,WAAW,CAAC;cACzF,KAAG,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,SAAW,CAAC;QAC/C,IAAM,sBAAsB,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,CAAC,GAAG,CAAC,WAAW,EAAhB,CAAgB,CAAC,EAAE,WAAW,CAAC,CAAC;QACpG,IAAM,uBAAuB,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,WAAW,EAAf,CAAe,CAAC,EAAE,WAAW,CAAC,CAAC;QACpG,IAAM,aAAa,IAAW,SAAS,SAAK,sBAAsB,EAAK,kBAAkB,GAAE,YAAY,GAAK,uBAAuB,CAAC,CAAC;QAErI,0BAA0B;QAC1B,CAAA,KAAA,IAAI,CAAC,OAAO,CAAA,CAAC,aAAa,CAAC,WAAI,aAAa,EAAE;;IAClD,CAAC;IAED,sCAAc,GAAd;IACA,CAAC;IAED;;OAEG;IACH,2CAAmB,GAAnB,UAAoB,aAAoC,EAAE,KAAoB;QAC1E,IAAM,OAAO,GAAQ,aAAa,CAAC,OAAO,CAAC;QAC3C,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YACjB,KAAK,uBAAU,CAAC,IAAI;gBAChB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;YACxB,KAAK,uBAAU,CAAC,KAAK;gBACjB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACtC,KAAK,uBAAU,CAAC,OAAO;gBACnB,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;oBACb,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBACvC,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC;gBAC3B,CAAC;YACL,KAAK,uBAAU,CAAC,KAAK;gBACjB,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACrC,KAAK,uBAAU,CAAC,MAAM;gBAClB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;YACrD,KAAK,uBAAU,CAAC,aAAa;gBACzB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;YACxB,KAAK,uBAAU,CAAC,cAAc;gBAC1B,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC;YACzB,KAAK,uBAAU,CAAC,UAAU;gBACtB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACpC,KAAK,uBAAU,CAAC,MAAM;gBAClB,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC;oBAAC,MAAM,CAAC;gBACpC,IAAM,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACrD,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACnC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,qCAAa,GAAb,UAAc,MAAW,EAAE,MAAsB,EAAE,OAA8B;QAC7E,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,IAAI,MAAM,IAAI,MAAM,YAAY,MAAM,CAAC,CAAC,CAAC;YACjE,IAAM,SAAO,GAAG,MAAM,CAAC,6BAA6B,IAAI,IAAI,CAAC,4BAA4B,CAAC;YAC1F,MAAM,GAAG,gCAAY,CAAC,MAAM,EAAE,SAAO,CAAC,CAAC;QAC3C,CAAC;QAED,IAAM,QAAQ,GAAQ,OAAO,CAAC,QAAQ,CAAC;QACvC,IAAM,iBAAiB,GAAG,MAAM,KAAK,SAAS,CAAC;QAC/C,IAAM,YAAY,GAAG,MAAM,KAAK,IAAI,CAAC;QACrC,IAAM,aAAa,GAAG,iBAAiB,IAAI,YAAY,IAAI,MAAM,KAAK,KAAK,IAAI,MAAM,KAAK,EAAE,CAAC;QAE7F,kBAAkB;QAClB,EAAE,CAAC,CAAC,MAAM,CAAC,mBAAmB,IAAI,iBAAiB,CAAC,CAAC,CAAC;YAClD,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;QAEhD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,cAAc,IAAI,YAAY,CAAC,CAAC,CAAC;YAC/C,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QAE3C,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,eAAe,IAAI,aAAa,CAAC,CAAC,CAAC;YACjD,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QAE5C,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC;YAChC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;QAC5C,CAAC;QAED,qBAAqB;QACrB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI;YACpC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClB,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACnC,OAAO,CAAC,IAAI,EAAE,CAAC;QAEnB,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACjC,IAAM,aAAa,GAAG,MAAM,IAAI,MAAM,YAAY,MAAM,GAAG,MAAM,GAAG,EAAE,CAAC;YAEvE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,EAAE,aAAa,EAAE,UAAC,GAAQ,EAAE,IAAY;gBAC/E,EAAE,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;oBAC5B,sBAAsB;oBACtB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAE7B,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;oBACpC,sBAAsB;oBACtB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAE7B,CAAC;gBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACd,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACxB,CAAC;gBACD,OAAO,CAAC,IAAI,EAAE,CAAC;YACnB,CAAC,CAAC,CAAC;QAEP,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,KAAK,SAAS,IAAI,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC;YAC5D,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,IAAI,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;gBAC1E,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC;oBACvE,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACzB,CAAC;gBAED,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;oBACrB,QAAQ,CAAC,IAAI,EAAE,CAAC;gBACpB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,QAAQ,CAAC,IAAI,EAAE,CAAC;gBACpB,CAAC;gBACD,OAAO,CAAC,IAAI,EAAE,CAAC;YACnB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;oBACrB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC1B,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;gBAClC,CAAC;gBACD,OAAO,CAAC,IAAI,EAAE,CAAC;YACnB,CAAC;QAEL,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,OAAO,CAAC,IAAI,EAAE,CAAC;QACnB,CAAC;IACL,CAAC;IAED;;OAEG;IACH,mCAAW,GAAX,UAAY,KAAU,EAAE,MAAsB,EAAE,OAA8B;QAC1E,EAAE,CAAC,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC,CAAC;YACrC,IAAM,UAAQ,GAAQ,OAAO,CAAC,QAAQ,CAAC;YAEvC,gBAAgB;YAChB,4GAA4G;YAC5G,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACjB,UAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YACpC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,UAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACzB,CAAC;YAED,qBAAqB;YACrB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI;gBACpC,UAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YAChD,CAAC,CAAC,CAAC;YAEH,qBAAqB;YACrB,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC;gBACrB,UAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;YAChD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,UAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,4DAA4D;YAC7G,CAAC;QACL,CAAC;QACD,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACxB,CAAC;IAED,4EAA4E;IAC5E,kBAAkB;IAClB,4EAA4E;IAEpE,0CAAkB,GAA1B,UAA2B,eAAyC,EAAE,YAAmC;QACrG,IAAM,kBAAkB,GAAe,EAAE,CAAC;QAC1C,eAAe,CAAC,OAAO,CAAC,UAAA,cAAc;YAClC,EAAE,CAAC,CAAC,cAAc,CAAC,WAAW,CAAC,SAAS,IAAI,cAAc,CAAC,WAAW,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;gBACzF,YAAY,CAAC,OAAO,CAAC,UAAA,WAAW;oBAC5B,EAAE,CAAC,CAAC,WAAW,CAAC,QAAQ,YAAY,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC;wBAC7D,kBAAkB,CAAC,IAAI,CAAC,UAAU,OAAY,EAAE,QAAa,EAAE,MAAW;4BACtE,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;wBACrE,CAAC,CAAC,CAAC;oBACP,CAAC;gBACL,CAAC,CAAC,CAAC;YAEP,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,kBAAkB,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YACxD,CAAC;QACL,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,kBAAkB,CAAC;IAC9B,CAAC;IAEO,oCAAY,GAApB,UAAqB,IAAmB,EAAE,WAAiC;QACvE,IAAM,mBAAmB,GAAe,EAAE,CAAC;QAC3C,IAAI,CAAC,OAAO,CAAC,UAAA,GAAG;YACZ,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,SAAS,IAAI,GAAG,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC3D,WAAW,CAAC,OAAO,CAAC,UAAA,UAAU;oBAC1B,EAAE,CAAC,CAAC,UAAU,CAAC,QAAQ,YAAY,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;wBAChD,mBAAmB,CAAC,IAAI,CAAC,UAAU,OAAY,EAAE,QAAa,EAAE,IAAuB;4BACnF,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;wBAC5D,CAAC,CAAC,CAAC;oBACP,CAAC;gBACL,CAAC,CAAC,CAAC;YACP,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,SAAS,IAAI,GAAG,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;gBACpE,WAAW,CAAC,OAAO,CAAC,UAAA,UAAU;oBAC1B,EAAE,CAAC,CAAC,UAAU,CAAC,oBAAoB,YAAY,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;wBAC5D,mBAAmB,CAAC,IAAI,CAAC,UAAU,KAAU,EAAE,OAAY,EAAE,QAAa,EAAE,IAAuB;4BAC/F,MAAM,CAAC,UAAU,CAAC,oBAAoB,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;wBACjF,CAAC,CAAC,CAAC;oBACP,CAAC;gBACL,CAAC,CAAC,CAAC;YAEP,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAC7C,CAAC;QACL,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,mBAAmB,CAAC;IAC/B,CAAC;IAEO,sCAAc,GAAtB;QACI,IAAI,CAAC;YACD,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAClC,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,MAAM,IAAI,KAAK,CAAC,gGAAgG,CAAC,CAAC;QACtH,CAAC;IACL,CAAC;IAEO,kCAAU,GAAlB;QACI,IAAI,CAAC;YACD,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC7B,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACT,MAAM,IAAI,KAAK,CAAC,sFAAsF,CAAC,CAAC;QAC5G,CAAC;IACL,CAAC;IAEL,oBAAC;AAAD,CA/VA,AA+VC,CA/VkC,uBAAU,GA+V5C;AA/VY,sCAAa","file":"ExpressDriver.js","sourcesContent":["import {HttpError} from \"../error/http/HttpError\";\nimport {UseMetadata} from \"../metadata/UseMetadata\";\nimport {MiddlewareMetadata} from \"../metadata/MiddlewareMetadata\";\nimport {BadHttpActionError} from \"../error/BadHttpActionError\";\nimport {ParamTypes} from \"../metadata/types/ParamTypes\";\nimport {ActionMetadata} from \"../metadata/ActionMetadata\";\nimport {ActionCallbackOptions} from \"../ActionCallbackOptions\";\nimport {classToPlain, ClassTransformOptions} from \"class-transformer\";\nimport {Driver} from \"./Driver\";\nimport {ParamMetadata} from \"../metadata/ParamMetadata\";\nimport {BaseDriver} from \"./BaseDriver\";\nimport {InterceptorMetadata} from \"../metadata/InterceptorMetadata\";\nimport {UseInterceptorMetadata} from \"../metadata/UseInterceptorMetadata\";\nimport {PromiseUtils} from \"../util/PromiseUtils\";\nconst cookie = require(\"cookie\");\n\n/**\n * Base driver functionality for all other drivers.\n */\nexport class ExpressDriver extends BaseDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(public express?: any) {\n        super();\n        if (require) {\n            if (!express) {\n                try {\n                    this.express = require(\"express\")();\n                } catch (e) {\n                    throw new Error(\"express package was not found installed. Try to install it: npm install express --save\");\n                }\n            }\n        } else {\n            throw new Error(\"Cannot load express. Try to install all required dependencies.\");\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    bootstrap() {\n    }\n    \n    /**\n     * Registers given error handler in the driver.\n     */\n    registerErrorHandler(middleware: MiddlewareMetadata): void {\n        if (!middleware.errorHandlerInstance.error)\n            return;\n\n        this.express.use(function (error: any, request: any, response: any, next: (err?: any) => any) {\n            middleware.errorHandlerInstance.error(error, request, response, next);\n        });\n    }\n\n    /**\n     * Registers middleware that run before controller actions.\n     */\n    registerMiddleware(middleware: MiddlewareMetadata): void {\n        if (!middleware.instance.use)\n            return;\n\n        this.express.use((request: any, response: any, next: (err: any) => any) => {\n\n            try {\n                const useResult = middleware.instance.use(request, response, next);\n                if (useResult instanceof Promise) {\n                    useResult.catch((error: any) => {\n                        this.handleError(error, undefined, {\n                            request: request,\n                            response: response,\n                            next: next,\n                        });\n                    });\n                }\n\n            } catch (error) {\n                this.handleError(error, undefined, {\n                    request: request,\n                    response: response,\n                    next: next,\n                });\n            }\n        });\n    }\n\n    /**\n     * Registers action in the driver.\n     */\n    registerAction(action: ActionMetadata,\n                   middlewares: MiddlewareMetadata[],\n                   interceptors: InterceptorMetadata[],\n                   executeCallback: (options: ActionCallbackOptions) => any): void {\n        const expressAction = action.type.toLowerCase();\n        if (!this.express[expressAction])\n            throw new BadHttpActionError(action.type);\n\n        const useInterceptors = action.controllerMetadata.useInterceptors.concat(action.useInterceptors);\n        const useInterceptorFunctions = this.registerIntercepts(useInterceptors, interceptors);\n        const globalUseInterceptors: Function[] = interceptors\n            .filter(interceptor => interceptor.isGlobal)\n            .sort((interceptor1, interceptor2) => interceptor1.priority - interceptor2.priority)\n            .reverse()\n            .map(interceptor => {\n                return function (request: any, response: any, result: any) {\n                    return interceptor.instance.intercept(request, response, result);\n                };\n            });\n\n        const routeHandler = function RouteHandler(request: any, response: any, next: Function) {\n            const options: ActionCallbackOptions = {\n                request: request,\n                response: response,\n                next: next,\n                useInterceptorFunctions: globalUseInterceptors.concat(useInterceptorFunctions)\n            };\n            executeCallback(options);\n        };\n\n        const defaultMiddlewares: any[] = [];\n        if (action.isBodyUsed) {\n            if (action.isJsonTyped) {\n                defaultMiddlewares.push(this.loadBodyParser().json());\n            } else {\n                defaultMiddlewares.push(this.loadBodyParser().text());\n            }\n        }\n        if (action.isFileUsed || action.isFilesUsed) {\n            const multer = this.loadMulter();\n            action.params\n                .filter(param => param.type === ParamTypes.UPLOADED_FILE)\n                .forEach(param => {\n                    defaultMiddlewares.push(multer(param.extraOptions).single(param.name));\n                });\n            action.params\n                .filter(param => param.type === ParamTypes.UPLOADED_FILES)\n                .forEach(param => {\n                    defaultMiddlewares.push(multer(param.extraOptions).array(param.name));\n                });\n        }\n\n        const uses = action.controllerMetadata.uses.concat(action.uses);\n        const fullRoute = action.fullRoute instanceof RegExp\n            ? ActionMetadata.appendBaseRouteToRegexpRoute(action.fullRoute as RegExp, this.routePrefix) \n            : `${this.routePrefix}${action.fullRoute}`;\n        const preMiddlewareFunctions = this.registerUses(uses.filter(use => !use.afterAction), middlewares);\n        const postMiddlewareFunctions = this.registerUses(uses.filter(use => use.afterAction), middlewares);\n        const expressParams: any[] = [fullRoute, ...preMiddlewareFunctions, ...defaultMiddlewares, routeHandler, ...postMiddlewareFunctions];\n\n        // finally register action\n        this.express[expressAction](...expressParams);\n    }\n\n    registerRoutes() {\n    }\n    \n    /**\n     * Gets param from the request.\n     */\n    getParamFromRequest(actionOptions: ActionCallbackOptions, param: ParamMetadata): void {\n        const request: any = actionOptions.request;\n        switch (param.type) {\n            case ParamTypes.BODY:\n                return request.body;\n            case ParamTypes.PARAM:\n                return request.params[param.name];\n            case ParamTypes.SESSION:\n                if (param.name) {\n                    return request.session[param.name]; \n                } else {\n                    return request.session;\n                }\n            case ParamTypes.QUERY:\n                return request.query[param.name];\n            case ParamTypes.HEADER:\n                return request.headers[param.name.toLowerCase()];\n            case ParamTypes.UPLOADED_FILE:\n                return request.file;\n            case ParamTypes.UPLOADED_FILES:\n                return request.files;\n            case ParamTypes.BODY_PARAM:\n                return request.body[param.name];\n            case ParamTypes.COOKIE:\n                if (!request.headers.cookie) return;\n                const cookies = cookie.parse(request.headers.cookie);\n                return cookies[param.name];\n        }\n    }\n\n    /**\n     * Defines an algorithm of how to handle success result of executing controller action.\n     */\n    handleSuccess(result: any, action: ActionMetadata, options: ActionCallbackOptions): void {\n        if (this.useClassTransformer && result && result instanceof Object) {\n            const options = action.responseClassTransformOptions || this.classToPlainTransformOptions;\n            result = classToPlain(result, options);\n        }\n\n        const response: any = options.response;\n        const isResultUndefined = result === undefined;\n        const isResultNull = result === null;\n        const isResultEmpty = isResultUndefined || isResultNull || result === false || result === \"\";\n\n        // set http status\n        if (action.undefinedResultCode && isResultUndefined) {\n            response.status(action.undefinedResultCode);\n\n        } else if (action.nullResultCode && isResultNull) {\n            response.status(action.nullResultCode);\n\n        } else if (action.emptyResultCode && isResultEmpty) {\n            response.status(action.emptyResultCode);\n\n        } else if (action.successHttpCode) {\n            response.status(action.successHttpCode);\n        }\n\n        // apply http headers\n        Object.keys(action.headers).forEach(name => {\n            response.header(name, action.headers[name]);\n        });\n\n        if (action.redirect) { // if redirect is set then do it\n            response.redirect(action.redirect);\n            options.next();\n\n        } else if (action.renderedTemplate) { // if template is set then render it\n            const renderOptions = result && result instanceof Object ? result : {};\n\n            this.express.render(action.renderedTemplate, renderOptions, (err: any, html: string) => {\n                if (err && action.isJsonTyped) {\n                    // response.json(err);\n                    return options.next(err);\n\n                } else if (err && !action.isJsonTyped) {\n                    // response.send(err);\n                    return options.next(err);\n\n                } else if (html) {\n                    response.send(html);\n                }\n                options.next();\n            });\n\n        } else if (result !== undefined || action.undefinedResultCode) { // send regular result\n            if (result === null || (result === undefined && action.undefinedResultCode)) {\n                if (result === null && !action.nullResultCode && !action.emptyResultCode) {\n                    response.status(204);\n                }\n\n                if (action.isJsonTyped) {\n                    response.json();\n                } else {\n                    response.send();\n                }\n                options.next();\n            } else {\n                if (action.isJsonTyped) {\n                    response.json(result);\n                } else {\n                    response.send(String(result));\n                }\n                options.next();\n            }\n\n        } else {\n            options.next();\n        }\n    }\n\n    /**\n     * Defines an algorithm of how to handle error during executing controller action.\n     */\n    handleError(error: any, action: ActionMetadata, options: ActionCallbackOptions): void {\n        if (this.isDefaultErrorHandlingEnabled) {\n            const response: any = options.response;\n\n            // set http code\n            // note that we can't use error instanceof HttpError properly anymore because of new typescript emit process\n            if (error.httpCode) {\n                response.status(error.httpCode);\n            } else {\n                response.status(500);\n            }\n\n            // apply http headers\n            Object.keys(action.headers).forEach(name => {\n                response.header(name, action.headers[name]);\n            });\n\n            // send error content\n            if (action.isJsonTyped) {\n                response.json(this.processJsonError(error));\n            } else {\n                response.send(this.processTextError(error)); // todo: no need to do it because express by default does it\n            }\n        }\n        options.next(error);\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    private registerIntercepts(useInterceptors: UseInterceptorMetadata[], interceptors: InterceptorMetadata[]) {\n        const interceptFunctions: Function[] = [];\n        useInterceptors.forEach(useInterceptor => {\n            if (useInterceptor.interceptor.prototype && useInterceptor.interceptor.prototype.intercept) { // if this is function instance of MiddlewareInterface\n                interceptors.forEach(interceptor => {\n                    if (interceptor.instance instanceof useInterceptor.interceptor) {\n                        interceptFunctions.push(function (request: any, response: any, result: any) {\n                            return interceptor.instance.intercept(request, response, result);\n                        });\n                    }\n                });\n\n            } else {\n                interceptFunctions.push(useInterceptor.interceptor);\n            }\n        });\n        return interceptFunctions;\n    }\n\n    private registerUses(uses: UseMetadata[], middlewares: MiddlewareMetadata[]) {\n        const middlewareFunctions: Function[] = [];\n        uses.forEach(use => {\n            if (use.middleware.prototype && use.middleware.prototype.use) { // if this is function instance of MiddlewareInterface\n                middlewares.forEach(middleware => {\n                    if (middleware.instance instanceof use.middleware) {\n                        middlewareFunctions.push(function (request: any, response: any, next: (err: any) => any) {\n                            return middleware.instance.use(request, response, next);\n                        });\n                    }\n                });\n            } else if (use.middleware.prototype && use.middleware.prototype.error) {  // if this is function instance of ErrorMiddlewareInterface\n                middlewares.forEach(middleware => {\n                    if (middleware.errorHandlerInstance instanceof use.middleware) {\n                        middlewareFunctions.push(function (error: any, request: any, response: any, next: (err: any) => any) {\n                            return middleware.errorHandlerInstance.error(error, request, response, next);\n                        });\n                    }\n                });\n\n            } else {\n                middlewareFunctions.push(use.middleware);\n            }\n        });\n        return middlewareFunctions;\n    }\n\n    private loadBodyParser() {\n        try {\n            return require(\"body-parser\");\n        } catch (e) {\n            throw new Error(\"body-parser package was not found installed. Try to install it: npm install body-parser --save\");\n        }\n    }\n\n    private loadMulter() {\n        try {\n            return require(\"multer\");\n        } catch (e) {\n            throw new Error(\"multer package was not found installed. Try to install it: npm install multer --save\");\n        }\n    }\n\n}\n"],"sourceRoot":".."}