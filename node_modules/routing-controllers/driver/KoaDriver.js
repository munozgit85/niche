"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;
    return { next: verb(0), "throw": verb(1), "return": verb(2) };
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var ParamTypes_1 = require("../metadata/types/ParamTypes");
var ActionMetadata_1 = require("../metadata/ActionMetadata");
var BaseDriver_1 = require("./BaseDriver");
var class_transformer_1 = require("class-transformer");
var BadHttpActionError_1 = require("../error/BadHttpActionError");
var cookie = require("cookie");
/**
 * Integration with koa framework.
 */
var KoaDriver = (function (_super) {
    __extends(KoaDriver, _super);
    // -------------------------------------------------------------------------
    // Constructor
    // -------------------------------------------------------------------------
    function KoaDriver(koa) {
        var _this = _super.call(this) || this;
        _this.koa = koa;
        if (require) {
            if (!koa) {
                try {
                    _this.koa = new (require("koa"))();
                }
                catch (e) {
                    throw new Error("koa package was not found installed. Try to install it: npm install koa@next --save");
                }
            }
            try {
                _this.router = new (require("koa-router"))();
            }
            catch (e) {
                throw new Error("koa-router package was not found installed. Try to install it: npm install koa-router@next --save");
            }
        }
        else {
            throw new Error("Cannot load koa. Try to install all required dependencies.");
        }
        return _this;
    }
    // -------------------------------------------------------------------------
    // Public Methods
    // -------------------------------------------------------------------------
    KoaDriver.prototype.bootstrap = function () {
        var bodyParser = require("koa-bodyparser");
        this.koa.use(bodyParser());
    };
    KoaDriver.prototype.registerErrorHandler = function (middleware) {
    };
    KoaDriver.prototype.registerMiddleware = function (middleware) {
        if (!middleware.instance.use)
            return;
        this.koa.use(function (ctx, next) {
            return middleware.instance.use(ctx, next);
        });
    };
    KoaDriver.prototype.registerAction = function (action, middlewares, interceptors, executeCallback) {
        var _this = this;
        var koaAction = action.type.toLowerCase();
        if (!this.router[koaAction])
            throw new BadHttpActionError_1.BadHttpActionError(action.type);
        var useInterceptors = action.controllerMetadata.useInterceptors.concat(action.useInterceptors);
        var useInterceptorFunctions = this.registerIntercepts(useInterceptors, interceptors);
        var globalUseInterceptors = interceptors
            .filter(function (interceptor) { return interceptor.isGlobal; })
            .sort(function (interceptor1, interceptor2) { return interceptor1.priority - interceptor2.priority; })
            .reverse()
            .map(function (interceptor) {
            return function (request, response, result) {
                return interceptor.instance.intercept(request, response, result);
            };
        });
        var defaultMiddlewares = [];
        if (action.isBodyUsed) {
            if (action.isJsonTyped) {
            }
            else {
            }
        }
        // file uploading is not working yet. need to implement it
        /*if (action.isFileUsed || action.isFilesUsed) {
            // todo: not implemented yet
            const multer = require("koa-router-multer");
            action.params
                .filter(param => param.type === ParamTypes.UPLOADED_FILE)
                .forEach(param => {
                    defaultMiddlewares.push(multer({ dest: "uploads/" }).single(param.name));
                });
            action.params
                .filter(param => param.type === ParamTypes.UPLOADED_FILES)
                .forEach(param => {
                    defaultMiddlewares.push(multer(param.extraOptions).array(param.name));
                });
        }*/
        var uses = action.controllerMetadata.uses.concat(action.uses);
        var preMiddlewareFunctions = this.registerUses(uses.filter(function (use) { return !use.afterAction; }), middlewares);
        var postMiddlewareFunctions = this.registerUses(uses.filter(function (use) { return use.afterAction; }), middlewares);
        var routeHandler = function (ctx, next) {
            return new Promise(function (resolve, reject) {
                var options = {
                    request: ctx.request,
                    response: ctx.response,
                    next: function (err) {
                        next().then(function (r) {
                            if (err && !_this.isDefaultErrorHandlingEnabled) {
                                return reject(err);
                            }
                            resolve(r);
                        }).catch(reject);
                    },
                    context: ctx,
                    useInterceptorFunctions: globalUseInterceptors.concat(useInterceptorFunctions)
                };
                executeCallback(options);
            });
        };
        var fullRoute = action.fullRoute instanceof RegExp
            ? ActionMetadata_1.ActionMetadata.appendBaseRouteToRegexpRoute(action.fullRoute, this.routePrefix)
            : "" + this.routePrefix + action.fullRoute;
        var routerParams = [fullRoute].concat(preMiddlewareFunctions, defaultMiddlewares, [routeHandler], postMiddlewareFunctions);
        (_a = this.router)[koaAction].apply(_a, routerParams);
        var _a;
    };
    KoaDriver.prototype.registerRoutes = function () {
        this.koa.use(this.router.routes());
        this.koa.use(this.router.allowedMethods());
    };
    KoaDriver.prototype.getParamFromRequest = function (actionOptions, param) {
        var context = actionOptions.context;
        var request = actionOptions.request;
        switch (param.type) {
            case ParamTypes_1.ParamTypes.BODY:
                return request.body;
            case ParamTypes_1.ParamTypes.PARAM:
                return context.params[param.name];
            case ParamTypes_1.ParamTypes.SESSION:
                throw new Error("@Session decorator is not supported by KoaDriver yet.");
            // TODO return session
            case ParamTypes_1.ParamTypes.QUERY:
                return context.query[param.name];
            case ParamTypes_1.ParamTypes.UPLOADED_FILE:
                throw new Error("@UploadedFile and @UploadedFiles decorators are not supported by KoaDriver yet.");
            // return actionOptions.context.req.file;
            case ParamTypes_1.ParamTypes.UPLOADED_FILES:
                throw new Error("@UploadedFile and @UploadedFiles decorators are not supported by KoaDriver yet.");
            // return actionOptions.context.req.files;
            case ParamTypes_1.ParamTypes.HEADER:
                return context.headers[param.name.toLowerCase()];
            case ParamTypes_1.ParamTypes.BODY_PARAM:
                return request.body[param.name];
            case ParamTypes_1.ParamTypes.COOKIE:
                if (!context.headers.cookie)
                    return;
                var cookies = cookie.parse(context.headers.cookie);
                return cookies[param.name];
        }
    };
    KoaDriver.prototype.handleSuccess = function (result, action, options) {
        if (this.useClassTransformer && result && result instanceof Object) {
            var options_1 = action.responseClassTransformOptions || this.classToPlainTransformOptions;
            result = class_transformer_1.classToPlain(result, options_1);
        }
        var response = options.response;
        var isResultUndefined = result === undefined;
        var isResultNull = result === null;
        var isResultEmpty = isResultUndefined || isResultNull || result === false || result === "";
        // set http status
        if (action.undefinedResultCode && isResultUndefined) {
            response.status = action.undefinedResultCode;
        }
        else if (action.nullResultCode && isResultNull) {
            response.status = action.nullResultCode;
        }
        else if (action.emptyResultCode && isResultEmpty) {
            response.status = action.emptyResultCode;
        }
        else if (action.successHttpCode) {
            response.status = action.successHttpCode;
        }
        // apply http headers
        Object.keys(action.headers).forEach(function (name) {
            response.set(name, action.headers[name]);
        });
        if (action.redirect) {
            response.redirect(action.redirect);
            options.next();
        }
        else if (action.renderedTemplate) {
            var renderOptions_1 = result && result instanceof Object ? result : {};
            this.koa.use(function (ctx, next) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, ctx.render(action.renderedTemplate, renderOptions_1)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                });
            });
            options.next();
        }
        else if (result !== undefined || action.undefinedResultCode) {
            if (result === null || (result === undefined && action.undefinedResultCode)) {
                if (action.isJsonTyped) {
                    response.body = null;
                }
                else {
                    response.body = null;
                }
                // todo: duplication. we make it here because after we set null to body koa seems overrides status
                if (action.nullResultCode) {
                    response.status = action.nullResultCode;
                }
                else if (action.emptyResultCode) {
                    response.status = action.emptyResultCode;
                }
                else if (result === undefined && action.undefinedResultCode) {
                    response.status = action.undefinedResultCode;
                }
                options.next();
            }
            else {
                if (action.isJsonTyped) {
                    response.body = result;
                }
                else {
                    response.body = String(result);
                }
                options.next();
            }
        }
        else {
            options.next();
        }
    };
    KoaDriver.prototype.handleError = function (error, action, options) {
        if (this.isDefaultErrorHandlingEnabled) {
            var response_1 = options.response;
            // set http status
            // note that we can't use error instanceof HttpError properly anymore because of new typescript emit process
            if (error.httpCode) {
                options.context.status = error.httpCode;
                response_1.status(error.httpCode);
            }
            else {
                options.context.status = 500;
            }
            // apply http headers
            Object.keys(action.headers).forEach(function (name) {
                response_1.set(name, action.headers[name]);
            });
            // send error content
            if (action.isJsonTyped) {
                response_1.body = this.processJsonError(error);
            }
            else {
                response_1.body = this.processJsonError(error);
            }
        }
        options.next(error);
        // throw error;
    };
    // -------------------------------------------------------------------------
    // Private Methods
    // -------------------------------------------------------------------------
    KoaDriver.prototype.registerIntercepts = function (useInterceptors, interceptors) {
        var interceptFunctions = [];
        useInterceptors.forEach(function (useInterceptor) {
            if (useInterceptor.interceptor.prototype && useInterceptor.interceptor.prototype.intercept) {
                interceptors.forEach(function (interceptor) {
                    if (interceptor.instance instanceof useInterceptor.interceptor) {
                        interceptFunctions.push(function (request, response, result) {
                            return interceptor.instance.intercept(request, response, result);
                        });
                    }
                });
            }
            else {
                interceptFunctions.push(useInterceptor.interceptor);
            }
        });
        return interceptFunctions;
    };
    KoaDriver.prototype.registerUses = function (uses, middlewares) {
        var middlewareFunctions = [];
        uses.forEach(function (use) {
            if (use.middleware.prototype && use.middleware.prototype.use) {
                middlewares.forEach(function (middleware) {
                    if (middleware.instance instanceof use.middleware) {
                        middlewareFunctions.push(function (context, next) {
                            return middleware.instance.use(context, next);
                        });
                    }
                });
            }
            else {
                middlewareFunctions.push(use.middleware);
            }
        });
        return middlewareFunctions;
    };
    return KoaDriver;
}(BaseDriver_1.BaseDriver));
exports.KoaDriver = KoaDriver;

//# sourceMappingURL=KoaDriver.js.map
