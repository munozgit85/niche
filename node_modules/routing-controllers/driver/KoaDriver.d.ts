import { ActionMetadata } from "../metadata/ActionMetadata";
import { MiddlewareMetadata } from "../metadata/MiddlewareMetadata";
import { ActionCallbackOptions } from "../ActionCallbackOptions";
import { BaseDriver } from "./BaseDriver";
import { Driver } from "./Driver";
import { ParamMetadata } from "../metadata/ParamMetadata";
import { InterceptorMetadata } from "../metadata/InterceptorMetadata";
/**
 * Integration with koa framework.
 */
export declare class KoaDriver extends BaseDriver implements Driver {
    koa: any;
    private router;
    constructor(koa?: any);
    bootstrap(): void;
    registerErrorHandler(middleware: MiddlewareMetadata): void;
    registerMiddleware(middleware: MiddlewareMetadata): void;
    registerAction(action: ActionMetadata, middlewares: MiddlewareMetadata[], interceptors: InterceptorMetadata[], executeCallback: (options: ActionCallbackOptions) => any): void;
    registerRoutes(): void;
    getParamFromRequest(actionOptions: ActionCallbackOptions, param: ParamMetadata): void;
    handleSuccess(result: any, action: ActionMetadata, options: ActionCallbackOptions): void;
    handleError(error: any, action: ActionMetadata, options: ActionCallbackOptions): void;
    private registerIntercepts(useInterceptors, interceptors);
    private registerUses(uses, middlewares);
}
