{"version":3,"sources":["../../src/driver/BaseDriver.ts"],"names":[],"mappings":"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","file":"BaseDriver.js","sourcesContent":["import {HttpError} from \"../error/http/HttpError\";\nimport {ClassTransformOptions} from \"class-transformer\";\n\n/**\n * Base driver functionality for all other drivers.\n */\nexport class BaseDriver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    useClassTransformer: boolean;\n\n    /**\n     * Global class transformer options passed to class-transformer during classToPlain operation.\n     * This operation is being executed when server returns response to user.\n     */\n    classToPlainTransformOptions: ClassTransformOptions;\n\n    /**\n     * Global class transformer options passed to class-transformer during plainToClass operation.\n     * This operation is being executed when parsing user parameters.\n     */\n    plainToClassTransformOptions: ClassTransformOptions;\n\n    isDefaultErrorHandlingEnabled: boolean;\n    developmentMode: boolean;\n    errorOverridingMap: { [key: string]: any };\n    routePrefix: string = \"\";\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected processJsonError(error: any) {\n        if (!this.isDefaultErrorHandlingEnabled)\n            return error;\n\n        let processedError: any = {};\n        if (error instanceof Error) {\n            const name = error.name && error.name !== \"Error\" ? error.name : error.constructor.name;\n\n            if (name && (this.developmentMode || error.message)) // show name only if in debug mode and if error message exist too\n                processedError.name = name;\n            if (error.message)\n                processedError.message = error.message;\n            if (error.stack && this.developmentMode)\n                processedError.stack = error.stack;\n\n            Object.keys(error)\n                .filter(key => key !== \"stack\" && key !== \"name\" && key !== \"message\" && (!(error instanceof HttpError) || key !== \"httpCode\"))\n                .forEach(key => processedError[key] = (error as any)[key]);\n\n            if (this.errorOverridingMap)\n                Object.keys(this.errorOverridingMap)\n                    .filter(key => name === key)\n                    .forEach(key => processedError = this.merge(processedError, this.errorOverridingMap[key]));\n\n            return Object.keys(processedError).length > 0 ? processedError : undefined;\n        }\n\n        return error;\n    }\n\n    protected processTextError(error: any) {\n        if (!this.isDefaultErrorHandlingEnabled)\n            return error;\n\n        if (error instanceof Error) {\n            if (this.developmentMode && error.stack) {\n                return error.stack;\n\n            } else if (error.message) {\n                return error.message;\n            }\n        }\n        return error;\n    }\n\n    private merge(obj1: any, obj2: any): any {\n        const result: any = {};\n        for (let i in obj1) {\n            if ((i in obj2) && (typeof obj1[i] === \"object\") && (i !== null)) {\n                result[i] = this.merge(obj1[i], obj2[i]);\n            } else {\n                result[i] = obj1[i];\n            }\n        }\n        for (let i in obj2) {\n            result[i] = obj2[i];\n        }\n        return result;\n    }\n\n}\n"],"sourceRoot":".."}