{"version":3,"sources":["../../src/RoutingControllerExecutor.ts"],"names":[],"mappings":"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","file":"RoutingControllerExecutor.js","sourcesContent":["import {ParamHandler} from \"./ParamHandler\";\nimport {MetadataBuilder} from \"./metadata-builder/MetadataBuilder\";\nimport {ActionMetadata} from \"./metadata/ActionMetadata\";\nimport {ActionCallbackOptions} from \"./ActionCallbackOptions\";\nimport {Driver} from \"./driver/Driver\";\nimport {PromiseUtils} from \"./util/PromiseUtils\";\n\n/**\n * Registers controllers and actions in the given server framework.\n */\nexport class RoutingControllerExecutor {\n\n    // -------------------------------------------------------------------------\n    // Private properties\n    // -------------------------------------------------------------------------\n\n    private paramHandler: ParamHandler;\n    private metadataBuilder: MetadataBuilder;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private driver: Driver) {\n        this.paramHandler = new ParamHandler(driver);\n        this.metadataBuilder = new MetadataBuilder();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    bootstrap() {\n        this.driver.bootstrap();\n        return this;\n    }\n\n    /**\n     * Registers actions in the driver.\n     */\n    registerActions(classes?: Function[]): this {\n        const middlewares = this.metadataBuilder.buildMiddlewareMetadata(classes);\n        const interceptors = this.metadataBuilder.buildInterceptorMetadata(classes);\n        const controllers = this.metadataBuilder.buildControllerMetadata(classes);\n        controllers.forEach(controller => {\n            controller.actions.forEach(action => {\n                this.driver.registerAction(action, middlewares, interceptors, (options: ActionCallbackOptions) => {\n                    this.handleAction(action, options);\n                });\n            });\n        });\n        this.driver.registerRoutes();\n        return this;\n    }\n\n    /**\n     * Registers post-execution middlewares in the driver.\n     */\n    registerMiddlewares(afterAction: boolean, classes?: Function[]): this {\n        this.metadataBuilder\n            .buildMiddlewareMetadata(classes)\n            .filter(middleware => middleware.isGlobal && middleware.afterAction === afterAction)\n            .sort((middleware1, middleware2) => middleware1.priority - middleware2.priority)\n            .reverse()\n            .forEach(middleware => {\n                if (middleware.isErrorHandler) {\n                    this.driver.registerErrorHandler(middleware);\n\n                } else if (middleware.isUseMiddleware) {\n                    this.driver.registerMiddleware(middleware);\n                }\n            });\n\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Methods\n    // -------------------------------------------------------------------------\n\n    private handleAction(action: ActionMetadata, options: ActionCallbackOptions) {\n\n        // compute all parameters\n        const paramsPromises = action.params\n            .sort((param1, param2) => param1.index - param2.index)\n            .map(param => this.paramHandler.handleParam(options, param));\n\n        // after all parameters are computed\n        Promise.all(paramsPromises).then(params => {\n\n            // execute action and handle result\n            const result = action.executeAction(params);\n            // if (result !== undefined)\n            this.handleResult(result, action, options);\n\n        }).catch(error => {\n            this.driver.handleError(error, action, options);\n        });\n    }\n\n    private handleResult(result: any, action: ActionMetadata, options: ActionCallbackOptions) {\n        if (PromiseUtils.isPromiseLike(result)) {\n            result\n                .then((data: any) => {\n                    return this.handleResult(data, action, options);\n                })\n                .catch((error: any) => {\n                    this.driver.handleError(error, action, options);\n                });\n        } else {\n            if (options.useInterceptorFunctions) {\n                const awaitPromise = PromiseUtils.runInSequence(options.useInterceptorFunctions, interceptorFn => {\n                    const interceptedResult = interceptorFn(options.request, options.response, result);\n                    if (interceptedResult instanceof Promise) {\n                        return interceptedResult.then((resultFromPromise: any) => {\n                            result = resultFromPromise;\n                        });\n                    } else {\n                        result = interceptedResult;\n                        return Promise.resolve();\n                    }\n                });\n\n                awaitPromise\n                    .then(() => this.driver.handleSuccess(result, action, options))\n                    .catch(error => this.driver.handleError(error, action, options));\n            } else {\n                this.driver.handleSuccess(result, action, options);\n            }\n\n        }\n    }\n\n}\n"],"sourceRoot":"."}