import { GlobalMiddlewareOptions } from "./options/GlobalMiddlewareOptions";
import { ClassTransformOptions } from "class-transformer";
/**
 * Registers a new middleware.
 */
export declare function Middleware(): Function;
/**
 * Registers a new interceptor.
 */
export declare function Interceptor(): Function;
/**
 * Registers a global middleware that runs before the route actions.
 */
export declare function MiddlewareGlobalBefore(options?: GlobalMiddlewareOptions): Function;
/**
 * Registers a global middleware that runs after the route actions.
 */
export declare function MiddlewareGlobalAfter(options?: GlobalMiddlewareOptions): Function;
/**
 * Registers a global interceptor.
 */
export declare function InterceptorGlobal(options?: {
    priority?: number;
}): Function;
/**
 * Specifies a given middleware to be used for controller or controller action BEFORE the action executes.
 * Must be set to controller action or controller class.
 */
export declare function UseBefore(...middlewares: Array<Function>): Function;
export declare function UseBefore(...middlewares: Array<(context: any, next: () => Promise<any>) => Promise<any>>): Function;
export declare function UseBefore(...middlewares: Array<(request: any, response: any, next: Function) => any>): Function;
/**
 * Specifies a given middleware to be used for controller or controller action AFTER the action executes.
 * Must be set to controller action or controller class.
 */
export declare function UseAfter(...middlewares: Array<Function>): Function;
export declare function UseAfter(...middlewares: Array<(context: any, next: () => Promise<any>) => Promise<any>>): Function;
export declare function UseAfter(...middlewares: Array<(request: any, response: any, next: Function) => any>): Function;
/**
 * Specifies a given interceptor middleware or interceptor function to be used for controller or controller action.
 * Must be set to controller action or controller class.
 */
export declare function UseInterceptor(...interceptors: Array<Function>): Function;
export declare function UseInterceptor(...interceptors: Array<(request: any, response: any, result: any) => any>): Function;
/**
 * Annotation must be set to controller action and given to it code will be used as HTTP Status Code in the case
 * if response result is success.
 */
export declare function HttpCode(code: number): (object: Object, methodName: string) => void;
/**
 * This decorator is used when user wants to get some specific HTTP code on empty result returned by a controller.
 */
export declare function EmptyResultCode(code: number): (object: Object, methodName: string) => void;
/**
 * This decorator is used when user wants to get some specific HTTP code on null result returned by a controller.
 */
export declare function NullResultCode(code: number): (object: Object, methodName: string) => void;
/**
 * This decorator is used when user wants to get some specific HTTP code on undefined result returned by a controller.
 */
export declare function UndefinedResultCode(code: number): (object: Object, methodName: string) => void;
/**
 * Options to be set to class-transformer for the result of the response.
 */
export declare function ResponseClassTransformOptions(options: ClassTransformOptions): (object: Object, methodName: string) => void;
/**
 * Annotation must be set to controller action and given content-type will be set to response.
 */
export declare function ContentType(type: string): (object: Object, methodName: string) => void;
/**
 * Annotation must be set to controller action and given content-type will be set to response.
 */
export declare function Header(name: string, value: string): (object: Object, methodName: string) => void;
/**
 * Sets Location header with given value to the response.
 */
export declare function Location(url: string): (object: Object, methodName: string) => void;
/**
 * Sets Redirect header with given value to the response.
 */
export declare function Redirect(url: string): (object: Object, methodName: string) => void;
/**
 * Specifies a template to be rendered by controller.
 */
export declare function Render(template: string): (object: Object, methodName: string) => void;
/**
 * Forces controller action to return a text response.
 * For example, if @JsonController is used then this decorator ignores it and returns a regular text/html response
 * instead of json.
 */
export declare function TextResponse(): (object: Object, methodName: string) => void;
/**
 * Forces controller action to return a text response.
 * For example, if @Controller is used then this decorator ignores it and returns a json response
 * instead of regular text/html response.
 */
export declare function JsonResponse(): (object: Object, methodName: string) => void;
