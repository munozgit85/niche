import { ParamOptions } from "./options/ParamOptions";
/**
 * This decorator allows to inject a Request object to the controller action parameter. After that you can fully use
 * Request object in your action method. Applied to class method parameters.
 */
export declare function Req(): (object: Object, methodName: string, index: number) => void;
/**
 * This decorator allows to inject a Response object to the controller action parameter. After that you can fully use
 * Response object in your action method. Applied to class method parameters.
 */
export declare function Res(): (object: Object, methodName: string, index: number) => void;
/**
 * This decorator allows to inject a route parameter value to the controller action parameter.
 * Applied to class method parameters.
 *
 * @param name Parameter name
 */
export declare function Param(name: string): (object: Object, methodName: string, index: number) => void;
/**
 * This decorator allows to inject a session object to the controller action parameter.
 * Applied to class method parameters.
 *
 * @param objectName The name of object stored in session
 */
export declare function Session(objectName?: string): (object: Object, methodName: string, index: number) => void;
/**
 * This decorator allows to inject a query parameter value to the controller action parameter.
 * Applied to class method parameters.
 *
 * @param name Parameter name
 * @param options Extra parameter options
 */
export declare function QueryParam(name: string, options?: ParamOptions): (object: Object, methodName: string, index: number) => void;
/**
 * This decorator allows to inject http header parameter value to the controller action parameter.
 * Applied to class method parameters.
 *
 * @param name Parameter name
 * @param options Extra parameter options
 */
export declare function HeaderParam(name: string, options?: ParamOptions): (object: Object, methodName: string, index: number) => void;
/**
 * This decorator allows to inject a cookie value to the controller action parameter.
 * Applied to class method parameters.
 *
 * @param name Cookie parameter name
 * @param options Extra parameter options
 */
export declare function CookieParam(name: string, options?: ParamOptions): (object: Object, methodName: string, index: number) => void;
/**
 * This decorator allows to inject a request body value to the controller action parameter.
 * Applied to class method parameters.
 *
 * @param options Extra parameter options
 */
export declare function Body(options?: ParamOptions): (object: Object, methodName: string, index: number) => void;
/**
 * This decorator allows to inject a request body's value to the controller action parameter.
 * Applied to class method parameters.
 *
 * @param name Body's parameter name
 * @param options Extra parameter options
 */
export declare function BodyParam(name: string, options?: ParamOptions): (object: Object, methodName: string, index: number) => void;
/**
 * This decorator allows to inject "file" from a request to a given parameter of the controller action.
 */
export declare function UploadedFile(name: string, options?: {
    uploadOptions?: any;
    required?: boolean;
}): Function;
/**
 * This decorator allows to inject "files" from a request to a given parameter of the controller action.
 */
export declare function UploadedFiles(name: string, options?: {
    uploadOptions?: any;
    required?: boolean;
}): Function;
