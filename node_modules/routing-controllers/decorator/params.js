"use strict";
var index_1 = require("../index");
var ParamTypes_1 = require("../metadata/types/ParamTypes");
/**
 * This decorator allows to inject a Request object to the controller action parameter. After that you can fully use
 * Request object in your action method. Applied to class method parameters.
 */
function Req() {
    return function (object, methodName, index) {
        var reflectedType = Reflect.getMetadata("design:paramtypes", object, methodName)[index];
        var metadata = {
            target: object.constructor,
            method: methodName,
            index: index,
            type: ParamTypes_1.ParamTypes.REQUEST,
            reflectedType: reflectedType,
            parseJson: false,
            isRequired: false
        };
        index_1.defaultMetadataArgsStorage().params.push(metadata);
    };
}
exports.Req = Req;
/**
 * This decorator allows to inject a Response object to the controller action parameter. After that you can fully use
 * Response object in your action method. Applied to class method parameters.
 */
function Res() {
    return function (object, methodName, index) {
        var reflectedType = Reflect.getMetadata("design:paramtypes", object, methodName)[index];
        var metadata = {
            target: object.constructor,
            method: methodName,
            index: index,
            type: ParamTypes_1.ParamTypes.RESPONSE,
            reflectedType: reflectedType,
            parseJson: false,
            isRequired: false
        };
        index_1.defaultMetadataArgsStorage().params.push(metadata);
    };
}
exports.Res = Res;
/**
 * This decorator allows to inject a route parameter value to the controller action parameter.
 * Applied to class method parameters.
 *
 * @param name Parameter name
 */
function Param(name) {
    return function (object, methodName, index) {
        var format = Reflect.getMetadata("design:paramtypes", object, methodName)[index];
        var metadata = {
            target: object.constructor,
            method: methodName,
            index: index,
            type: ParamTypes_1.ParamTypes.PARAM,
            reflectedType: format,
            name: name,
            format: format,
            parseJson: false,
            isRequired: true,
            classTransformOptions: undefined
        };
        index_1.defaultMetadataArgsStorage().params.push(metadata);
    };
}
exports.Param = Param;
/**
 * This decorator allows to inject a session object to the controller action parameter.
 * Applied to class method parameters.
 *
 * @param objectName The name of object stored in session
 */
function Session(objectName) {
    return function (object, methodName, index) {
        var format = Reflect.getMetadata("design:paramtypes", object, methodName)[index];
        var metadata = {
            target: object.constructor,
            method: methodName,
            index: index,
            type: ParamTypes_1.ParamTypes.SESSION,
            reflectedType: format,
            name: objectName,
            format: format,
            parseJson: false,
            isRequired: true,
            classTransformOptions: undefined
        };
        index_1.defaultMetadataArgsStorage().params.push(metadata);
    };
}
exports.Session = Session;
/**
 * This decorator allows to inject a query parameter value to the controller action parameter.
 * Applied to class method parameters.
 *
 * @param name Parameter name
 * @param options Extra parameter options
 */
function QueryParam(name, options) {
    return function (object, methodName, index) {
        var format = Reflect.getMetadata("design:paramtypes", object, methodName)[index];
        var metadata = {
            target: object.constructor,
            method: methodName,
            index: index,
            type: ParamTypes_1.ParamTypes.QUERY,
            reflectedType: format,
            name: name,
            format: format,
            parseJson: options ? options.parseJson : false,
            isRequired: options ? options.required : false,
            classTransformOptions: options ? options.classTransformOptions : undefined
        };
        index_1.defaultMetadataArgsStorage().params.push(metadata);
    };
}
exports.QueryParam = QueryParam;
/**
 * This decorator allows to inject http header parameter value to the controller action parameter.
 * Applied to class method parameters.
 *
 * @param name Parameter name
 * @param options Extra parameter options
 */
function HeaderParam(name, options) {
    return function (object, methodName, index) {
        var format = Reflect.getMetadata("design:paramtypes", object, methodName)[index];
        var metadata = {
            target: object.constructor,
            method: methodName,
            index: index,
            type: ParamTypes_1.ParamTypes.HEADER,
            reflectedType: format,
            name: name,
            format: format,
            parseJson: options ? options.parseJson : false,
            isRequired: options ? options.required : false,
            classTransformOptions: options ? options.classTransformOptions : undefined
        };
        index_1.defaultMetadataArgsStorage().params.push(metadata);
    };
}
exports.HeaderParam = HeaderParam;
/**
 * This decorator allows to inject a cookie value to the controller action parameter.
 * Applied to class method parameters.
 *
 * @param name Cookie parameter name
 * @param options Extra parameter options
 */
function CookieParam(name, options) {
    return function (object, methodName, index) {
        var format = Reflect.getMetadata("design:paramtypes", object, methodName)[index];
        var metadata = {
            target: object.constructor,
            method: methodName,
            index: index,
            type: ParamTypes_1.ParamTypes.COOKIE,
            reflectedType: format,
            name: name,
            format: format,
            parseJson: options ? options.parseJson : false,
            isRequired: options ? options.required : false,
            classTransformOptions: options ? options.classTransformOptions : undefined
        };
        index_1.defaultMetadataArgsStorage().params.push(metadata);
    };
}
exports.CookieParam = CookieParam;
/**
 * This decorator allows to inject a request body value to the controller action parameter.
 * Applied to class method parameters.
 *
 * @param options Extra parameter options
 */
function Body(options) {
    return function (object, methodName, index) {
        var format = Reflect.getMetadata("design:paramtypes", object, methodName)[index];
        var metadata = {
            target: object.constructor,
            method: methodName,
            index: index,
            type: ParamTypes_1.ParamTypes.BODY,
            reflectedType: format,
            format: format,
            parseJson: false,
            isRequired: options ? options.required : false,
            classTransformOptions: options ? options.classTransformOptions : undefined
        };
        index_1.defaultMetadataArgsStorage().params.push(metadata);
    };
}
exports.Body = Body;
/**
 * This decorator allows to inject a request body's value to the controller action parameter.
 * Applied to class method parameters.
 *
 * @param name Body's parameter name
 * @param options Extra parameter options
 */
function BodyParam(name, options) {
    return function (object, methodName, index) {
        var format = Reflect.getMetadata("design:paramtypes", object, methodName)[index];
        var metadata = {
            target: object.constructor,
            method: methodName,
            index: index,
            type: ParamTypes_1.ParamTypes.BODY_PARAM,
            reflectedType: format,
            name: name,
            format: format,
            parseJson: options ? options.parseJson : false,
            isRequired: options ? options.required : false,
            classTransformOptions: options ? options.classTransformOptions : undefined
        };
        index_1.defaultMetadataArgsStorage().params.push(metadata);
    };
}
exports.BodyParam = BodyParam;
/**
 * This decorator allows to inject "file" from a request to a given parameter of the controller action.
 */
function UploadedFile(name, options) {
    return function (object, methodName, index) {
        var format = Reflect.getMetadata("design:paramtypes", object, methodName)[index];
        var metadata = {
            target: object.constructor,
            method: methodName,
            index: index,
            type: ParamTypes_1.ParamTypes.UPLOADED_FILE,
            reflectedType: format,
            name: name,
            format: format,
            parseJson: false,
            isRequired: options ? options.required : false,
            extraOptions: options ? options.uploadOptions : undefined
        };
        index_1.defaultMetadataArgsStorage().params.push(metadata);
    };
}
exports.UploadedFile = UploadedFile;
/**
 * This decorator allows to inject "files" from a request to a given parameter of the controller action.
 */
function UploadedFiles(name, options) {
    return function (object, methodName, index) {
        var format = Reflect.getMetadata("design:paramtypes", object, methodName)[index];
        var metadata = {
            target: object.constructor,
            method: methodName,
            index: index,
            type: ParamTypes_1.ParamTypes.UPLOADED_FILES,
            reflectedType: format,
            name: name,
            format: format,
            parseJson: false,
            isRequired: options ? options.required : false,
            extraOptions: options ? options.uploadOptions : undefined
        };
        index_1.defaultMetadataArgsStorage().params.push(metadata);
    };
}
exports.UploadedFiles = UploadedFiles;

//# sourceMappingURL=params.js.map
