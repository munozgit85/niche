"use strict";
var index_1 = require("../index");
var ResponsePropertyTypes_1 = require("../metadata/types/ResponsePropertyTypes");
/**
 * Registers a new middleware.
 */
function Middleware() {
    return function (target) {
        var metadata = {
            target: target,
            isGlobal: false,
            priority: undefined,
            afterAction: false
        };
        index_1.defaultMetadataArgsStorage().middlewares.push(metadata);
    };
}
exports.Middleware = Middleware;
/**
 * Registers a new interceptor.
 */
function Interceptor() {
    return function (target) {
        var metadata = {
            target: target,
            isGlobal: false,
            priority: undefined
        };
        index_1.defaultMetadataArgsStorage().interceptors.push(metadata);
    };
}
exports.Interceptor = Interceptor;
/**
 * Registers a global middleware that runs before the route actions.
 */
function MiddlewareGlobalBefore(options) {
    return function (target) {
        var metadata = {
            target: target,
            isGlobal: true,
            priority: options && options.priority ? options.priority : undefined,
            afterAction: false
        };
        index_1.defaultMetadataArgsStorage().middlewares.push(metadata);
    };
}
exports.MiddlewareGlobalBefore = MiddlewareGlobalBefore;
/**
 * Registers a global middleware that runs after the route actions.
 */
function MiddlewareGlobalAfter(options) {
    return function (target) {
        var metadata = {
            target: target,
            isGlobal: true,
            priority: options && options.priority ? options.priority : undefined,
            afterAction: true
        };
        index_1.defaultMetadataArgsStorage().middlewares.push(metadata);
    };
}
exports.MiddlewareGlobalAfter = MiddlewareGlobalAfter;
/**
 * Registers a global interceptor.
 */
function InterceptorGlobal(options) {
    return function (target) {
        var metadata = {
            target: target,
            isGlobal: true,
            priority: options && options.priority ? options.priority : undefined
        };
        index_1.defaultMetadataArgsStorage().interceptors.push(metadata);
    };
}
exports.InterceptorGlobal = InterceptorGlobal;
function UseBefore() {
    var middlewares = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        middlewares[_i] = arguments[_i];
    }
    return function (objectOrFunction, methodName) {
        middlewares.forEach(function (middleware) {
            var metadata = {
                middleware: middleware,
                target: methodName ? objectOrFunction.constructor : objectOrFunction,
                method: methodName,
                afterAction: false
            };
            index_1.defaultMetadataArgsStorage().uses.push(metadata);
        });
    };
}
exports.UseBefore = UseBefore;
function UseAfter() {
    var middlewares = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        middlewares[_i] = arguments[_i];
    }
    return function (objectOrFunction, methodName) {
        middlewares.forEach(function (middleware) {
            var metadata = {
                middleware: middleware,
                target: methodName ? objectOrFunction.constructor : objectOrFunction,
                method: methodName,
                afterAction: true
            };
            index_1.defaultMetadataArgsStorage().uses.push(metadata);
        });
    };
}
exports.UseAfter = UseAfter;
function UseInterceptor() {
    var interceptors = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        interceptors[_i] = arguments[_i];
    }
    return function (objectOrFunction, methodName) {
        interceptors.forEach(function (interceptor) {
            var metadata = {
                interceptor: interceptor,
                target: methodName ? objectOrFunction.constructor : objectOrFunction,
                method: methodName
            };
            index_1.defaultMetadataArgsStorage().useInterceptors.push(metadata);
        });
    };
}
exports.UseInterceptor = UseInterceptor;
/**
 * Annotation must be set to controller action and given to it code will be used as HTTP Status Code in the case
 * if response result is success.
 */
function HttpCode(code) {
    return function (object, methodName) {
        var metadata = {
            value: code,
            target: object.constructor,
            method: methodName,
            type: ResponsePropertyTypes_1.ResponseHandlerTypes.SUCCESS_CODE
        };
        index_1.defaultMetadataArgsStorage().responseHandlers.push(metadata);
    };
}
exports.HttpCode = HttpCode;
/**
 * This decorator is used when user wants to get some specific HTTP code on empty result returned by a controller.
 */
function EmptyResultCode(code) {
    return function (object, methodName) {
        var metadata = {
            value: code,
            target: object.constructor,
            method: methodName,
            type: ResponsePropertyTypes_1.ResponseHandlerTypes.EMPTY_RESULT_CODE
        };
        index_1.defaultMetadataArgsStorage().responseHandlers.push(metadata);
    };
}
exports.EmptyResultCode = EmptyResultCode;
/**
 * This decorator is used when user wants to get some specific HTTP code on null result returned by a controller.
 */
function NullResultCode(code) {
    return function (object, methodName) {
        var metadata = {
            value: code,
            target: object.constructor,
            method: methodName,
            type: ResponsePropertyTypes_1.ResponseHandlerTypes.NULL_RESULT_CODE
        };
        index_1.defaultMetadataArgsStorage().responseHandlers.push(metadata);
    };
}
exports.NullResultCode = NullResultCode;
/**
 * This decorator is used when user wants to get some specific HTTP code on undefined result returned by a controller.
 */
function UndefinedResultCode(code) {
    return function (object, methodName) {
        var metadata = {
            value: code,
            target: object.constructor,
            method: methodName,
            type: ResponsePropertyTypes_1.ResponseHandlerTypes.UNDEFINED_RESULT_CODE
        };
        index_1.defaultMetadataArgsStorage().responseHandlers.push(metadata);
    };
}
exports.UndefinedResultCode = UndefinedResultCode;
/**
 * Options to be set to class-transformer for the result of the response.
 */
function ResponseClassTransformOptions(options) {
    return function (object, methodName) {
        var metadata = {
            value: options,
            target: object.constructor,
            method: methodName,
            type: ResponsePropertyTypes_1.ResponseHandlerTypes.RESPONSE_CLASS_TRANSFORM_OPTIONS
        };
        index_1.defaultMetadataArgsStorage().responseHandlers.push(metadata);
    };
}
exports.ResponseClassTransformOptions = ResponseClassTransformOptions;
/**
 * Annotation must be set to controller action and given content-type will be set to response.
 */
function ContentType(type) {
    return function (object, methodName) {
        var metadata = {
            value: type,
            target: object.constructor,
            method: methodName,
            type: ResponsePropertyTypes_1.ResponseHandlerTypes.CONTENT_TYPE
        };
        index_1.defaultMetadataArgsStorage().responseHandlers.push(metadata);
    };
}
exports.ContentType = ContentType;
/**
 * Annotation must be set to controller action and given content-type will be set to response.
 */
function Header(name, value) {
    return function (object, methodName) {
        var metadata = {
            value: name,
            secondaryValue: value,
            target: object.constructor,
            method: methodName,
            type: ResponsePropertyTypes_1.ResponseHandlerTypes.HEADER
        };
        index_1.defaultMetadataArgsStorage().responseHandlers.push(metadata);
    };
}
exports.Header = Header;
/**
 * Sets Location header with given value to the response.
 */
function Location(url) {
    return function (object, methodName) {
        var metadata = {
            value: url,
            target: object.constructor,
            method: methodName,
            type: ResponsePropertyTypes_1.ResponseHandlerTypes.LOCATION
        };
        index_1.defaultMetadataArgsStorage().responseHandlers.push(metadata);
    };
}
exports.Location = Location;
/**
 * Sets Redirect header with given value to the response.
 */
function Redirect(url) {
    return function (object, methodName) {
        var metadata = {
            value: url,
            target: object.constructor,
            method: methodName,
            type: ResponsePropertyTypes_1.ResponseHandlerTypes.REDIRECT
        };
        index_1.defaultMetadataArgsStorage().responseHandlers.push(metadata);
    };
}
exports.Redirect = Redirect;
/**
 * Specifies a template to be rendered by controller.
 */
function Render(template) {
    return function (object, methodName) {
        var metadata = {
            value: template,
            target: object.constructor,
            method: methodName,
            type: ResponsePropertyTypes_1.ResponseHandlerTypes.RENDERED_TEMPLATE
        };
        index_1.defaultMetadataArgsStorage().responseHandlers.push(metadata);
    };
}
exports.Render = Render;
/**
 * Forces controller action to return a text response.
 * For example, if @JsonController is used then this decorator ignores it and returns a regular text/html response
 * instead of json.
 */
function TextResponse() {
    return function (object, methodName) {
        var metadata = {
            target: object.constructor,
            method: methodName,
            type: ResponsePropertyTypes_1.ResponseHandlerTypes.TEXT_RESPONSE
        };
        index_1.defaultMetadataArgsStorage().responseHandlers.push(metadata);
    };
}
exports.TextResponse = TextResponse;
/**
 * Forces controller action to return a text response.
 * For example, if @Controller is used then this decorator ignores it and returns a json response
 * instead of regular text/html response.
 */
function JsonResponse() {
    return function (object, methodName) {
        var metadata = {
            target: object.constructor,
            method: methodName,
            type: ResponsePropertyTypes_1.ResponseHandlerTypes.JSON_RESPONSE
        };
        index_1.defaultMetadataArgsStorage().responseHandlers.push(metadata);
    };
}
exports.JsonResponse = JsonResponse;

//# sourceMappingURL=decorators.js.map
