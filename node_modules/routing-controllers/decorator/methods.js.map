{"version":3,"sources":["../../src/decorator/methods.ts"],"names":[],"mappings":"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","file":"methods.js","sourcesContent":["import {defaultMetadataArgsStorage} from \"../index\";\nimport {ActionTypes, ActionType} from \"../metadata/types/ActionTypes\";\nimport {ActionMetadataArgs} from \"../metadata/args/ActionMetadataArgs\";\n\n/**\n * Registers an action to be executed when GET request comes on a given route.\n * Applied to controller class methods.\n * \n * @param route When request comes to this route this action will be executed\n */\nexport function Get(route?: RegExp): Function;\nexport function Get(route?: string): Function;\nexport function Get(route?: string|RegExp): Function {\n    return function (object: Object, methodName: string) {\n        const metadata: ActionMetadataArgs = {\n            route: route,\n            target: object.constructor,\n            method: methodName,\n            type: ActionTypes.GET\n        };\n        defaultMetadataArgsStorage().actions.push(metadata);\n    };\n}\n\n/**\n * Registers an action to be executed when POST request comes on a given route.\n * Applied to controller class methods.\n *\n * @param route When request comes to this route this action will be executed\n */\nexport function Post(route?: RegExp): Function;\nexport function Post(route?: string): Function;\nexport function Post(route?: string|RegExp): Function {\n    return function (object: Object, methodName: string) {\n        const metadata: ActionMetadataArgs = {\n            route: route,\n            target: object.constructor,\n            method: methodName,\n            type: ActionTypes.POST\n        };\n        defaultMetadataArgsStorage().actions.push(metadata);\n    };\n}\n\n/**\n * Registers an action to be executed when PUT request comes on a given route.\n * Applied to controller class methods.\n *\n * @param route When request comes to this route this action will be executed\n */\nexport function Put(route?: RegExp): Function;\nexport function Put(route?: string): Function;\nexport function Put(route?: string|RegExp): Function {\n    return function (object: Object, methodName: string) {\n        const metadata: ActionMetadataArgs = {\n            route: route,\n            target: object.constructor,\n            method: methodName,\n            type: ActionTypes.PUT\n        };\n        defaultMetadataArgsStorage().actions.push(metadata);\n    };\n}\n\n/**\n * Registers an action to be executed when PATCH request comes on a given route.\n * Applied to controller class methods.\n *\n * @param route When request comes to this route this action will be executed\n */\nexport function Patch(route?: RegExp): Function;\nexport function Patch(route?: string): Function;\nexport function Patch(route?: string|RegExp): Function {\n    return function (object: Object, methodName: string) {\n        const metadata: ActionMetadataArgs = {\n            route: route,\n            target: object.constructor,\n            method: methodName,\n            type: ActionTypes.PATCH\n        };\n        defaultMetadataArgsStorage().actions.push(metadata);\n    };\n}\n\n/**\n * Registers an action to be executed when DELETE request comes on a given route.\n * Applied to controller class methods.\n *\n * @param route When request comes to this route this action will be executed\n */\nexport function Delete(route?: RegExp): Function;\nexport function Delete(route?: string): Function;\nexport function Delete(route?: string|RegExp): Function {\n    return function (object: Object, methodName: string) {\n        const metadata: ActionMetadataArgs = {\n            route: route,\n            target: object.constructor,\n            method: methodName,\n            type: ActionTypes.DELETE\n        };\n        defaultMetadataArgsStorage().actions.push(metadata);\n    };\n}\n\n/**\n * Registers an action to be executed when HEAD request comes on a given route.\n * Applied to controller class methods.\n *\n * @param route When request comes to this route this action will be executed\n */\nexport function Head(route?: RegExp): Function;\nexport function Head(route?: string): Function;\nexport function Head(route?: string|RegExp): Function {\n    return function (object: Object, methodName: string) {\n        const metadata: ActionMetadataArgs = {\n            route: route,\n            target: object.constructor,\n            method: methodName,\n            type: ActionTypes.HEAD\n        };\n        defaultMetadataArgsStorage().actions.push(metadata);\n    };\n}\n\n/**\n * Registers an action to be executed when request with specified method comes on a given route.\n * Applied to controller class methods.\n *\n * @param method Http method to be registered. All avalible http methods are listed in ActionType class\n * @param route When request comes to this route this action will be executed\n */\nexport function Method(method: ActionType, route?: RegExp): Function;\nexport function Method(method: ActionType, route?: string): Function;\nexport function Method(method: ActionType, route?: string|RegExp): Function {\n    return function (object: Object, methodName: string) {\n        const metadata: ActionMetadataArgs = {\n            route: route,\n            target: object.constructor,\n            method: methodName,\n            type: method\n        };\n        defaultMetadataArgsStorage().actions.push(metadata);\n    };\n}\n"],"sourceRoot":".."}