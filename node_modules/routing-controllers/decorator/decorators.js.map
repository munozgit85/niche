{"version":3,"sources":["../../src/decorator/decorators.ts"],"names":[],"mappings":";AAAA,kCAAoD;AACpD,iFAA6E;AAS7E;;GAEG;AACH;IACI,MAAM,CAAC,UAAU,MAAgB;QAC7B,IAAM,QAAQ,GAA2B;YACrC,MAAM,EAAE,MAAM;YACd,QAAQ,EAAE,KAAK;YACf,QAAQ,EAAE,SAAS;YACnB,WAAW,EAAE,KAAK;SACrB,CAAC;QACF,kCAA0B,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC5D,CAAC,CAAC;AACN,CAAC;AAVD,gCAUC;AAED;;GAEG;AACH;IACI,MAAM,CAAC,UAAU,MAAgB;QAC7B,IAAM,QAAQ,GAA4B;YACtC,MAAM,EAAE,MAAM;YACd,QAAQ,EAAE,KAAK;YACf,QAAQ,EAAE,SAAS;SACtB,CAAC;QACF,kCAA0B,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC7D,CAAC,CAAC;AACN,CAAC;AATD,kCASC;AAED;;GAEG;AACH,gCAAuC,OAAiC;IACpE,MAAM,CAAC,UAAU,MAAgB;QAC7B,IAAM,QAAQ,GAA2B;YACrC,MAAM,EAAE,MAAM;YACd,QAAQ,EAAE,IAAI;YACd,QAAQ,EAAE,OAAO,IAAI,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,GAAG,SAAS;YACpE,WAAW,EAAE,KAAK;SACrB,CAAC;QACF,kCAA0B,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC5D,CAAC,CAAC;AACN,CAAC;AAVD,wDAUC;AAED;;GAEG;AACH,+BAAsC,OAAiC;IACnE,MAAM,CAAC,UAAU,MAAgB;QAC7B,IAAM,QAAQ,GAA2B;YACrC,MAAM,EAAE,MAAM;YACd,QAAQ,EAAE,IAAI;YACd,QAAQ,EAAE,OAAO,IAAI,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,GAAG,SAAS;YACpE,WAAW,EAAE,IAAI;SACpB,CAAC;QACF,kCAA0B,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC5D,CAAC,CAAC;AACN,CAAC;AAVD,sDAUC;AAED;;GAEG;AACH,2BAAkC,OAA+B;IAC7D,MAAM,CAAC,UAAU,MAAgB;QAC7B,IAAM,QAAQ,GAA4B;YACtC,MAAM,EAAE,MAAM;YACd,QAAQ,EAAE,IAAI;YACd,QAAQ,EAAE,OAAO,IAAI,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,GAAG,SAAS;SACvE,CAAC;QACF,kCAA0B,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC7D,CAAC,CAAC;AACN,CAAC;AATD,8CASC;AASD;IAA0B,qBAAsF;SAAtF,UAAsF,EAAtF,qBAAsF,EAAtF,IAAsF;QAAtF,gCAAsF;;IAC5G,MAAM,CAAC,UAAU,gBAAiC,EAAE,UAAmB;QACnE,WAAW,CAAC,OAAO,CAAC,UAAA,UAAU;YAC1B,IAAM,QAAQ,GAAoB;gBAC9B,UAAU,EAAE,UAAU;gBACtB,MAAM,EAAE,UAAU,GAAG,gBAAgB,CAAC,WAAW,GAAG,gBAA4B;gBAChF,MAAM,EAAE,UAAU;gBAClB,WAAW,EAAE,KAAK;aACrB,CAAC;YACF,kCAA0B,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;AACN,CAAC;AAZD,8BAYC;AASD;IAAyB,qBAAsF;SAAtF,UAAsF,EAAtF,qBAAsF,EAAtF,IAAsF;QAAtF,gCAAsF;;IAC3G,MAAM,CAAC,UAAU,gBAAiC,EAAE,UAAmB;QACnE,WAAW,CAAC,OAAO,CAAC,UAAA,UAAU;YAC1B,IAAM,QAAQ,GAAoB;gBAC9B,UAAU,EAAE,UAAU;gBACtB,MAAM,EAAE,UAAU,GAAG,gBAAgB,CAAC,WAAW,GAAG,gBAA4B;gBAChF,MAAM,EAAE,UAAU;gBAClB,WAAW,EAAE,IAAI;aACpB,CAAC;YACF,kCAA0B,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;AACN,CAAC;AAZD,4BAYC;AAQD;IAA+B,sBAAoF;SAApF,UAAoF,EAApF,qBAAoF,EAApF,IAAoF;QAApF,iCAAoF;;IAC/G,MAAM,CAAC,UAAU,gBAAiC,EAAE,UAAmB;QACnE,YAAY,CAAC,OAAO,CAAC,UAAA,WAAW;YAC5B,IAAM,QAAQ,GAA+B;gBACzC,WAAW,EAAE,WAAW;gBACxB,MAAM,EAAE,UAAU,GAAG,gBAAgB,CAAC,WAAW,GAAG,gBAA4B;gBAChF,MAAM,EAAE,UAAU;aACrB,CAAC;YACF,kCAA0B,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;AACN,CAAC;AAXD,wCAWC;AAED;;;GAGG;AACH,kBAAyB,IAAY;IACjC,MAAM,CAAC,UAAU,MAAc,EAAE,UAAkB;QAC/C,IAAM,QAAQ,GAAgC;YAC1C,KAAK,EAAE,IAAI;YACX,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,MAAM,EAAE,UAAU;YAClB,IAAI,EAAE,4CAAoB,CAAC,YAAY;SAC1C,CAAC;QACF,kCAA0B,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjE,CAAC,CAAC;AACN,CAAC;AAVD,4BAUC;AAED;;GAEG;AACH,yBAAgC,IAAY;IACxC,MAAM,CAAC,UAAU,MAAc,EAAE,UAAkB;QAC/C,IAAM,QAAQ,GAAgC;YAC1C,KAAK,EAAE,IAAI;YACX,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,MAAM,EAAE,UAAU;YAClB,IAAI,EAAE,4CAAoB,CAAC,iBAAiB;SAC/C,CAAC;QACF,kCAA0B,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjE,CAAC,CAAC;AACN,CAAC;AAVD,0CAUC;AAED;;GAEG;AACH,wBAA+B,IAAY;IACvC,MAAM,CAAC,UAAU,MAAc,EAAE,UAAkB;QAC/C,IAAM,QAAQ,GAAgC;YAC1C,KAAK,EAAE,IAAI;YACX,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,MAAM,EAAE,UAAU;YAClB,IAAI,EAAE,4CAAoB,CAAC,gBAAgB;SAC9C,CAAC;QACF,kCAA0B,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjE,CAAC,CAAC;AACN,CAAC;AAVD,wCAUC;AAED;;GAEG;AACH,6BAAoC,IAAY;IAC5C,MAAM,CAAC,UAAU,MAAc,EAAE,UAAkB;QAC/C,IAAM,QAAQ,GAAgC;YAC1C,KAAK,EAAE,IAAI;YACX,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,MAAM,EAAE,UAAU;YAClB,IAAI,EAAE,4CAAoB,CAAC,qBAAqB;SACnD,CAAC;QACF,kCAA0B,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjE,CAAC,CAAC;AACN,CAAC;AAVD,kDAUC;AAED;;GAEG;AACH,uCAA8C,OAA8B;IACxE,MAAM,CAAC,UAAU,MAAc,EAAE,UAAkB;QAC/C,IAAM,QAAQ,GAAgC;YAC1C,KAAK,EAAE,OAAO;YACd,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,MAAM,EAAE,UAAU;YAClB,IAAI,EAAE,4CAAoB,CAAC,gCAAgC;SAC9D,CAAC;QACF,kCAA0B,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjE,CAAC,CAAC;AACN,CAAC;AAVD,sEAUC;AAED;;GAEG;AACH,qBAA4B,IAAY;IACpC,MAAM,CAAC,UAAU,MAAc,EAAE,UAAkB;QAC/C,IAAM,QAAQ,GAAgC;YAC1C,KAAK,EAAE,IAAI;YACX,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,MAAM,EAAE,UAAU;YAClB,IAAI,EAAE,4CAAoB,CAAC,YAAY;SAC1C,CAAC;QACF,kCAA0B,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjE,CAAC,CAAC;AACN,CAAC;AAVD,kCAUC;AAED;;GAEG;AACH,gBAAuB,IAAY,EAAE,KAAa;IAC9C,MAAM,CAAC,UAAU,MAAc,EAAE,UAAkB;QAC/C,IAAM,QAAQ,GAAgC;YAC1C,KAAK,EAAE,IAAI;YACX,cAAc,EAAE,KAAK;YACrB,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,MAAM,EAAE,UAAU;YAClB,IAAI,EAAE,4CAAoB,CAAC,MAAM;SACpC,CAAC;QACF,kCAA0B,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjE,CAAC,CAAC;AACN,CAAC;AAXD,wBAWC;AAED;;GAEG;AACH,kBAAyB,GAAW;IAChC,MAAM,CAAC,UAAU,MAAc,EAAE,UAAkB;QAC/C,IAAM,QAAQ,GAAgC;YAC1C,KAAK,EAAE,GAAG;YACV,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,MAAM,EAAE,UAAU;YAClB,IAAI,EAAE,4CAAoB,CAAC,QAAQ;SACtC,CAAC;QACF,kCAA0B,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjE,CAAC,CAAC;AACN,CAAC;AAVD,4BAUC;AAED;;GAEG;AACH,kBAAyB,GAAW;IAChC,MAAM,CAAC,UAAU,MAAc,EAAE,UAAkB;QAC/C,IAAM,QAAQ,GAAgC;YAC1C,KAAK,EAAE,GAAG;YACV,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,MAAM,EAAE,UAAU;YAClB,IAAI,EAAE,4CAAoB,CAAC,QAAQ;SACtC,CAAC;QACF,kCAA0B,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjE,CAAC,CAAC;AACN,CAAC;AAVD,4BAUC;AAED;;GAEG;AACH,gBAAuB,QAAgB;IACnC,MAAM,CAAC,UAAU,MAAc,EAAE,UAAkB;QAC/C,IAAM,QAAQ,GAAgC;YAC1C,KAAK,EAAE,QAAQ;YACf,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,MAAM,EAAE,UAAU;YAClB,IAAI,EAAE,4CAAoB,CAAC,iBAAiB;SAC/C,CAAC;QACF,kCAA0B,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjE,CAAC,CAAC;AACN,CAAC;AAVD,wBAUC;AAED;;;;GAIG;AACH;IACI,MAAM,CAAC,UAAU,MAAc,EAAE,UAAkB;QAC/C,IAAM,QAAQ,GAAgC;YAC1C,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,MAAM,EAAE,UAAU;YAClB,IAAI,EAAE,4CAAoB,CAAC,aAAa;SAC3C,CAAC;QACF,kCAA0B,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjE,CAAC,CAAC;AACN,CAAC;AATD,oCASC;AAGD;;;;GAIG;AACH;IACI,MAAM,CAAC,UAAU,MAAc,EAAE,UAAkB;QAC/C,IAAM,QAAQ,GAAgC;YAC1C,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,MAAM,EAAE,UAAU;YAClB,IAAI,EAAE,4CAAoB,CAAC,aAAa;SAC3C,CAAC;QACF,kCAA0B,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjE,CAAC,CAAC;AACN,CAAC;AATD,oCASC","file":"decorators.js","sourcesContent":["import {defaultMetadataArgsStorage} from \"../index\";\nimport {ResponseHandlerTypes} from \"../metadata/types/ResponsePropertyTypes\";\nimport {ResponseHandlerMetadataArgs} from \"../metadata/args/ResponseHandleMetadataArgs\";\nimport {MiddlewareMetadataArgs} from \"../metadata/args/MiddlewareMetadataArgs\";\nimport {UseMetadataArgs} from \"../metadata/args/UseMetadataArgs\";\nimport {GlobalMiddlewareOptions} from \"./options/GlobalMiddlewareOptions\";\nimport {ClassTransformOptions} from \"class-transformer\";\nimport {UseInterceptorMetadataArgs} from \"../metadata/args/UseInterceptorMetadataArgs\";\nimport {InterceptorMetadataArgs} from \"../metadata/args/InterceptorMetadataArgs\";\n\n/**\n * Registers a new middleware.\n */\nexport function Middleware(): Function {\n    return function (target: Function) {\n        const metadata: MiddlewareMetadataArgs = {\n            target: target,\n            isGlobal: false,\n            priority: undefined,\n            afterAction: false\n        };\n        defaultMetadataArgsStorage().middlewares.push(metadata);\n    };\n}\n\n/**\n * Registers a new interceptor.\n */\nexport function Interceptor(): Function {\n    return function (target: Function) {\n        const metadata: InterceptorMetadataArgs = {\n            target: target,\n            isGlobal: false,\n            priority: undefined\n        };\n        defaultMetadataArgsStorage().interceptors.push(metadata);\n    };\n}\n\n/**\n * Registers a global middleware that runs before the route actions.\n */\nexport function MiddlewareGlobalBefore(options?: GlobalMiddlewareOptions): Function {\n    return function (target: Function) {\n        const metadata: MiddlewareMetadataArgs = {\n            target: target,\n            isGlobal: true,\n            priority: options && options.priority ? options.priority : undefined,\n            afterAction: false\n        };\n        defaultMetadataArgsStorage().middlewares.push(metadata);\n    };\n}\n\n/**\n * Registers a global middleware that runs after the route actions.\n */\nexport function MiddlewareGlobalAfter(options?: GlobalMiddlewareOptions): Function {\n    return function (target: Function) {\n        const metadata: MiddlewareMetadataArgs = {\n            target: target,\n            isGlobal: true,\n            priority: options && options.priority ? options.priority : undefined,\n            afterAction: true\n        };\n        defaultMetadataArgsStorage().middlewares.push(metadata);\n    };\n}\n\n/**\n * Registers a global interceptor.\n */\nexport function InterceptorGlobal(options?: { priority?: number }): Function {\n    return function (target: Function) {\n        const metadata: InterceptorMetadataArgs = {\n            target: target,\n            isGlobal: true,\n            priority: options && options.priority ? options.priority : undefined\n        };\n        defaultMetadataArgsStorage().interceptors.push(metadata);\n    };\n}\n\n/**\n * Specifies a given middleware to be used for controller or controller action BEFORE the action executes.\n * Must be set to controller action or controller class.\n */\nexport function UseBefore(...middlewares: Array<Function>): Function;\nexport function UseBefore(...middlewares: Array<(context: any, next: () => Promise<any>) => Promise<any>>): Function;\nexport function UseBefore(...middlewares: Array<(request: any, response: any, next: Function) => any>): Function;\nexport function UseBefore(...middlewares: Array<Function|((request: any, response: any, next: Function) => any)>): Function {\n    return function (objectOrFunction: Object|Function, methodName?: string) {\n        middlewares.forEach(middleware => {\n            const metadata: UseMetadataArgs = {\n                middleware: middleware,\n                target: methodName ? objectOrFunction.constructor : objectOrFunction as Function,\n                method: methodName,\n                afterAction: false\n            };\n            defaultMetadataArgsStorage().uses.push(metadata);\n        });\n    };\n}\n\n/**\n * Specifies a given middleware to be used for controller or controller action AFTER the action executes.\n * Must be set to controller action or controller class.\n */\nexport function UseAfter(...middlewares: Array<Function>): Function;\nexport function UseAfter(...middlewares: Array<(context: any, next: () => Promise<any>) => Promise<any>>): Function;\nexport function UseAfter(...middlewares: Array<(request: any, response: any, next: Function) => any>): Function;\nexport function UseAfter(...middlewares: Array<Function|((request: any, response: any, next: Function) => any)>): Function {\n    return function (objectOrFunction: Object|Function, methodName?: string) {\n        middlewares.forEach(middleware => {\n            const metadata: UseMetadataArgs = {\n                middleware: middleware,\n                target: methodName ? objectOrFunction.constructor : objectOrFunction as Function,\n                method: methodName,\n                afterAction: true\n            };\n            defaultMetadataArgsStorage().uses.push(metadata);\n        });\n    };\n}\n\n/**\n * Specifies a given interceptor middleware or interceptor function to be used for controller or controller action.\n * Must be set to controller action or controller class.\n */\nexport function UseInterceptor(...interceptors: Array<Function>): Function;\nexport function UseInterceptor(...interceptors: Array<(request: any, response: any, result: any) => any>): Function;\nexport function UseInterceptor(...interceptors: Array<Function|((request: any, response: any, result: any) => any)>): Function {\n    return function (objectOrFunction: Object|Function, methodName?: string) {\n        interceptors.forEach(interceptor => {\n            const metadata: UseInterceptorMetadataArgs = {\n                interceptor: interceptor,\n                target: methodName ? objectOrFunction.constructor : objectOrFunction as Function,\n                method: methodName\n            };\n            defaultMetadataArgsStorage().useInterceptors.push(metadata);\n        });\n    };\n}\n\n/**\n * Annotation must be set to controller action and given to it code will be used as HTTP Status Code in the case\n * if response result is success.\n */\nexport function HttpCode(code: number) {\n    return function (object: Object, methodName: string) {\n        const metadata: ResponseHandlerMetadataArgs = {\n            value: code,\n            target: object.constructor,\n            method: methodName,\n            type: ResponseHandlerTypes.SUCCESS_CODE\n        };\n        defaultMetadataArgsStorage().responseHandlers.push(metadata);\n    };\n}\n\n/**\n * This decorator is used when user wants to get some specific HTTP code on empty result returned by a controller.\n */\nexport function EmptyResultCode(code: number) {\n    return function (object: Object, methodName: string) {\n        const metadata: ResponseHandlerMetadataArgs = {\n            value: code,\n            target: object.constructor,\n            method: methodName,\n            type: ResponseHandlerTypes.EMPTY_RESULT_CODE\n        };\n        defaultMetadataArgsStorage().responseHandlers.push(metadata);\n    };\n}\n\n/**\n * This decorator is used when user wants to get some specific HTTP code on null result returned by a controller.\n */\nexport function NullResultCode(code: number) {\n    return function (object: Object, methodName: string) {\n        const metadata: ResponseHandlerMetadataArgs = {\n            value: code,\n            target: object.constructor,\n            method: methodName,\n            type: ResponseHandlerTypes.NULL_RESULT_CODE\n        };\n        defaultMetadataArgsStorage().responseHandlers.push(metadata);\n    };\n}\n\n/**\n * This decorator is used when user wants to get some specific HTTP code on undefined result returned by a controller.\n */\nexport function UndefinedResultCode(code: number) {\n    return function (object: Object, methodName: string) {\n        const metadata: ResponseHandlerMetadataArgs = {\n            value: code,\n            target: object.constructor,\n            method: methodName,\n            type: ResponseHandlerTypes.UNDEFINED_RESULT_CODE\n        };\n        defaultMetadataArgsStorage().responseHandlers.push(metadata);\n    };\n}\n\n/**\n * Options to be set to class-transformer for the result of the response.\n */\nexport function ResponseClassTransformOptions(options: ClassTransformOptions) {\n    return function (object: Object, methodName: string) {\n        const metadata: ResponseHandlerMetadataArgs = {\n            value: options,\n            target: object.constructor,\n            method: methodName,\n            type: ResponseHandlerTypes.RESPONSE_CLASS_TRANSFORM_OPTIONS\n        };\n        defaultMetadataArgsStorage().responseHandlers.push(metadata);\n    };\n}\n\n/**\n * Annotation must be set to controller action and given content-type will be set to response.\n */\nexport function ContentType(type: string) {\n    return function (object: Object, methodName: string) {\n        const metadata: ResponseHandlerMetadataArgs = {\n            value: type,\n            target: object.constructor,\n            method: methodName,\n            type: ResponseHandlerTypes.CONTENT_TYPE\n        };\n        defaultMetadataArgsStorage().responseHandlers.push(metadata);\n    };\n}\n\n/**\n * Annotation must be set to controller action and given content-type will be set to response.\n */\nexport function Header(name: string, value: string) {\n    return function (object: Object, methodName: string) {\n        const metadata: ResponseHandlerMetadataArgs = {\n            value: name,\n            secondaryValue: value,\n            target: object.constructor,\n            method: methodName,\n            type: ResponseHandlerTypes.HEADER\n        };\n        defaultMetadataArgsStorage().responseHandlers.push(metadata);\n    };\n}\n\n/**\n * Sets Location header with given value to the response.\n */\nexport function Location(url: string) {\n    return function (object: Object, methodName: string) {\n        const metadata: ResponseHandlerMetadataArgs = {\n            value: url,\n            target: object.constructor,\n            method: methodName,\n            type: ResponseHandlerTypes.LOCATION\n        };\n        defaultMetadataArgsStorage().responseHandlers.push(metadata);\n    };\n}\n\n/**\n * Sets Redirect header with given value to the response.\n */\nexport function Redirect(url: string) {\n    return function (object: Object, methodName: string) {\n        const metadata: ResponseHandlerMetadataArgs = {\n            value: url,\n            target: object.constructor,\n            method: methodName,\n            type: ResponseHandlerTypes.REDIRECT\n        };\n        defaultMetadataArgsStorage().responseHandlers.push(metadata);\n    };\n}\n\n/**\n * Specifies a template to be rendered by controller.\n */\nexport function Render(template: string) {\n    return function (object: Object, methodName: string) {\n        const metadata: ResponseHandlerMetadataArgs = {\n            value: template,\n            target: object.constructor,\n            method: methodName,\n            type: ResponseHandlerTypes.RENDERED_TEMPLATE\n        };\n        defaultMetadataArgsStorage().responseHandlers.push(metadata);\n    };\n}\n\n/**\n * Forces controller action to return a text response.\n * For example, if @JsonController is used then this decorator ignores it and returns a regular text/html response\n * instead of json.\n */\nexport function TextResponse() {\n    return function (object: Object, methodName: string) {\n        const metadata: ResponseHandlerMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            type: ResponseHandlerTypes.TEXT_RESPONSE\n        };\n        defaultMetadataArgsStorage().responseHandlers.push(metadata);\n    };\n}\n\n\n/**\n * Forces controller action to return a text response.\n * For example, if @Controller is used then this decorator ignores it and returns a json response\n * instead of regular text/html response.\n */\nexport function JsonResponse() {\n    return function (object: Object, methodName: string) {\n        const metadata: ResponseHandlerMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            type: ResponseHandlerTypes.JSON_RESPONSE\n        };\n        defaultMetadataArgsStorage().responseHandlers.push(metadata);\n    };\n}\n"],"sourceRoot":".."}