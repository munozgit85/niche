{"version":3,"sources":["../../src/decorator/controllers.ts"],"names":[],"mappings":";AAAA,kCAAoD;AAGpD;;;;;GAKG;AACH,oBAA2B,SAAkB;IACzC,MAAM,CAAC,UAAU,MAAgB;QAC7B,IAAM,QAAQ,GAA2B;YACrC,KAAK,EAAE,SAAS;YAChB,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,SAAS;SAClB,CAAC;QACF,kCAA0B,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC5D,CAAC,CAAC;AACN,CAAC;AATD,gCASC;AAED;;;;;GAKG;AACH,wBAA+B,SAAkB;IAC7C,MAAM,CAAC,UAAU,MAAgB;QAC7B,IAAM,QAAQ,GAA2B;YACrC,KAAK,EAAE,SAAS;YAChB,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,MAAM;SACf,CAAC;QACF,kCAA0B,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC5D,CAAC,CAAC;AACN,CAAC;AATD,wCASC","file":"controllers.js","sourcesContent":["import {defaultMetadataArgsStorage} from \"../index\";\nimport {ControllerMetadataArgs} from \"../metadata/args/ControllerMetadataArgs\";\n\n/**\n * Defines a class as a controller. All methods with special decorators will be registered as controller actions.\n * Controller actions are executed when request to their routes comes.\n *\n * @param baseRoute Extra path you can apply as a base route to all controller actions\n */\nexport function Controller(baseRoute?: string) {\n    return function (object: Function) {\n        const metadata: ControllerMetadataArgs = {\n            route: baseRoute,\n            target: object,\n            type: \"default\"\n        };\n        defaultMetadataArgsStorage().controllers.push(metadata);\n    };\n}\n\n/**\n * Defines a class as a JSON controller. If JSON controller is used, then all controller actions will return\n * a serialized json data, and its response content-type always will be application/json.\n *\n * @param baseRoute Extra path you can apply as a base route to all controller actions\n */\nexport function JsonController(baseRoute?: string) {\n    return function (object: Function) {\n        const metadata: ControllerMetadataArgs = {\n            route: baseRoute,\n            target: object,\n            type: \"json\"\n        };\n        defaultMetadataArgsStorage().controllers.push(metadata);\n    };\n}\n"],"sourceRoot":".."}