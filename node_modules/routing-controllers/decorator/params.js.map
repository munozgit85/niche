{"version":3,"sources":["../../src/decorator/params.ts"],"names":[],"mappings":"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","file":"params.js","sourcesContent":["import {defaultMetadataArgsStorage} from \"../index\";\nimport {ParamTypes} from \"../metadata/types/ParamTypes\";\nimport {ParamOptions} from \"./options/ParamOptions\";\nimport {ParamMetadataArgs} from \"../metadata/args/ParamMetadataArgs\";\n\n/**\n * This decorator allows to inject a Request object to the controller action parameter. After that you can fully use\n * Request object in your action method. Applied to class method parameters.\n */\nexport function Req() {\n    return function (object: Object, methodName: string, index: number) {\n        const reflectedType = (Reflect as any).getMetadata(\"design:paramtypes\", object, methodName)[index];\n        const metadata: ParamMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            index: index,\n            type: ParamTypes.REQUEST,\n            reflectedType: reflectedType,\n            parseJson: false,\n            isRequired: false\n        };\n        defaultMetadataArgsStorage().params.push(metadata);\n    };\n}\n\n/**\n * This decorator allows to inject a Response object to the controller action parameter. After that you can fully use\n * Response object in your action method. Applied to class method parameters.\n */\nexport function Res() {\n    return function (object: Object, methodName: string, index: number) {\n        const reflectedType = (Reflect as any).getMetadata(\"design:paramtypes\", object, methodName)[index];\n        const metadata: ParamMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            index: index,\n            type: ParamTypes.RESPONSE,\n            reflectedType: reflectedType,\n            parseJson: false,\n            isRequired: false\n        };\n        defaultMetadataArgsStorage().params.push(metadata);\n    };\n}\n\n/**\n * This decorator allows to inject a route parameter value to the controller action parameter.\n * Applied to class method parameters.\n *\n * @param name Parameter name\n */\nexport function Param(name: string) {\n    return function (object: Object, methodName: string, index: number) {\n        let format = (Reflect as any).getMetadata(\"design:paramtypes\", object, methodName)[index];\n        const metadata: ParamMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            index: index,\n            type: ParamTypes.PARAM,\n            reflectedType: format,\n            name: name,\n            format: format,\n            parseJson: false, // it does not make sense for Param to be parsed\n            isRequired: true, // params are always required, because if they are missing router will not match the route\n            classTransformOptions: undefined\n        };\n        defaultMetadataArgsStorage().params.push(metadata);\n    };\n}\n\n/**\n * This decorator allows to inject a session object to the controller action parameter.\n * Applied to class method parameters.\n *\n * @param objectName The name of object stored in session\n */\nexport function Session(objectName?: string) {\n    return function (object: Object, methodName: string, index: number) {\n        let format = (Reflect as any).getMetadata(\"design:paramtypes\", object, methodName)[index];\n        const metadata: ParamMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            index: index,\n            type: ParamTypes.SESSION,\n            reflectedType: format,\n            name: objectName,\n            format: format,\n            parseJson: false, // it does not make sense for Session to be parsed\n            isRequired: true, // when we demand session object, it must exist (working session middleware)\n            classTransformOptions: undefined\n        };\n        defaultMetadataArgsStorage().params.push(metadata);\n    };\n}\n\n/**\n * This decorator allows to inject a query parameter value to the controller action parameter.\n * Applied to class method parameters.\n *\n * @param name Parameter name\n * @param options Extra parameter options\n */\nexport function QueryParam(name: string, options?: ParamOptions) {\n    return function (object: Object, methodName: string, index: number) {\n        const format = (Reflect as any).getMetadata(\"design:paramtypes\", object, methodName)[index];\n        const metadata: ParamMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            index: index,\n            type: ParamTypes.QUERY,\n            reflectedType: format,\n            name: name,\n            format: format,\n            parseJson: options ? options.parseJson : false,\n            isRequired: options ? options.required : false,\n            classTransformOptions: options ? options.classTransformOptions : undefined\n        };\n        defaultMetadataArgsStorage().params.push(metadata);\n    };\n}\n\n/**\n * This decorator allows to inject http header parameter value to the controller action parameter.\n * Applied to class method parameters.\n *\n * @param name Parameter name\n * @param options Extra parameter options\n */\nexport function HeaderParam(name: string, options?: ParamOptions) {\n    return function (object: Object, methodName: string, index: number) {\n        const format = (Reflect as any).getMetadata(\"design:paramtypes\", object, methodName)[index];\n        const metadata: ParamMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            index: index,\n            type: ParamTypes.HEADER,\n            reflectedType: format,\n            name: name,\n            format: format,\n            parseJson: options ? options.parseJson : false,\n            isRequired: options ? options.required : false,\n            classTransformOptions: options ? options.classTransformOptions : undefined\n        };\n        defaultMetadataArgsStorage().params.push(metadata);\n    };\n}\n\n/**\n * This decorator allows to inject a cookie value to the controller action parameter.\n * Applied to class method parameters.\n *\n * @param name Cookie parameter name\n * @param options Extra parameter options\n */\nexport function CookieParam(name: string, options?: ParamOptions) {\n    return function (object: Object, methodName: string, index: number) {\n        let format = (Reflect as any).getMetadata(\"design:paramtypes\", object, methodName)[index];\n        const metadata: ParamMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            index: index,\n            type: ParamTypes.COOKIE,\n            reflectedType: format,\n            name: name,\n            format: format,\n            parseJson: options ? options.parseJson : false,\n            isRequired: options ? options.required : false,\n            classTransformOptions: options ? options.classTransformOptions : undefined\n        };\n        defaultMetadataArgsStorage().params.push(metadata);\n    };\n}\n\n\n/**\n * This decorator allows to inject a request body value to the controller action parameter.\n * Applied to class method parameters.\n *\n * @param options Extra parameter options\n */\nexport function Body(options?: ParamOptions) {\n    return function (object: Object, methodName: string, index: number) {\n        const format = (Reflect as any).getMetadata(\"design:paramtypes\", object, methodName)[index];\n        const metadata: ParamMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            index: index,\n            type: ParamTypes.BODY,\n            reflectedType: format,\n            format: format,\n            parseJson: false,\n            isRequired: options ? options.required : false,\n            classTransformOptions: options ? options.classTransformOptions : undefined\n        };\n        defaultMetadataArgsStorage().params.push(metadata);\n    };\n}\n\n/**\n * This decorator allows to inject a request body's value to the controller action parameter.\n * Applied to class method parameters.\n *\n * @param name Body's parameter name\n * @param options Extra parameter options\n */\nexport function BodyParam(name: string, options?: ParamOptions) {\n    return function (object: Object, methodName: string, index: number) {\n        let format = (Reflect as any).getMetadata(\"design:paramtypes\", object, methodName)[index];\n        const metadata: ParamMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            index: index,\n            type: ParamTypes.BODY_PARAM,\n            reflectedType: format,\n            name: name,\n            format: format,\n            parseJson: options ? options.parseJson : false,\n            isRequired: options ? options.required : false,\n            classTransformOptions: options ? options.classTransformOptions : undefined\n        };\n        defaultMetadataArgsStorage().params.push(metadata);\n    };\n}\n\n/**\n * This decorator allows to inject \"file\" from a request to a given parameter of the controller action.\n */\nexport function UploadedFile(name: string, options?: { uploadOptions?: any, required?: boolean }): Function {\n    return function (object: Object, methodName: string, index: number) {\n        const format = (Reflect as any).getMetadata(\"design:paramtypes\", object, methodName)[index];\n        const metadata: ParamMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            index: index,\n            type: ParamTypes.UPLOADED_FILE,\n            reflectedType: format,\n            name: name,\n            format: format,\n            parseJson: false,\n            isRequired: options ? options.required : false,\n            extraOptions: options ? options.uploadOptions : undefined\n        };\n        defaultMetadataArgsStorage().params.push(metadata);\n    };\n}\n\n/**\n * This decorator allows to inject \"files\" from a request to a given parameter of the controller action.\n */\nexport function UploadedFiles(name: string, options?: { uploadOptions?: any, required?: boolean }): Function {\n    return function (object: Object, methodName: string, index: number) {\n        const format = (Reflect as any).getMetadata(\"design:paramtypes\", object, methodName)[index];\n        const metadata: ParamMetadataArgs = {\n            target: object.constructor,\n            method: methodName,\n            index: index,\n            type: ParamTypes.UPLOADED_FILES,\n            reflectedType: format,\n            name: name,\n            format: format,\n            parseJson: false,\n            isRequired: options ? options.required : false,\n            extraOptions: options ? options.uploadOptions : undefined\n        };\n        defaultMetadataArgsStorage().params.push(metadata);\n    };\n}"],"sourceRoot":".."}