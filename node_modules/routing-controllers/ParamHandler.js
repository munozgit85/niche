"use strict";
var ParameterParseJsonError_1 = require("./error/ParameterParseJsonError");
var class_transformer_1 = require("class-transformer");
var ParamTypes_1 = require("./metadata/types/ParamTypes");
/**
 * Helps to handle parameters.
 */
var ParamHandler = (function () {
    // -------------------------------------------------------------------------
    // Constructor
    // -------------------------------------------------------------------------
    function ParamHandler(driver) {
        this.driver = driver;
    }
    // -------------------------------------------------------------------------
    // Public Methods
    // -------------------------------------------------------------------------
    ParamHandler.prototype.handleParam = function (actionOptions, param) {
        var request = actionOptions.request;
        var response = actionOptions.response;
        if (param.type === ParamTypes_1.ParamTypes.REQUEST)
            return Promise.resolve(request);
        if (param.type === ParamTypes_1.ParamTypes.RESPONSE)
            return Promise.resolve(response);
        var value, originalValue;
        value = originalValue = this.driver.getParamFromRequest(actionOptions, param);
        var isValueEmpty = value === null || value === undefined || value === "";
        var isValueEmptyObject = value instanceof Object && Object.keys(value).length === 0;
        if (!isValueEmpty)
            value = this.handleParamFormat(value, param);
        // check cases when parameter is required but its empty and throw errors in such cases
        if (param.isRequired) {
            // todo: make better error messages here
            if (param.name && isValueEmpty) {
                return Promise.reject("Parameter " + param.name + " is required for request on " + request.method + " " + request.url);
            }
            else if (!param.name && (isValueEmpty || isValueEmptyObject)) {
                return Promise.reject("Request body is required for request on " + request.method + " " + request.url);
            }
        }
        // if transform function is given for this param then apply it
        if (param.transform)
            value = param.transform(value, request, response);
        var promiseValue = value instanceof Promise ? value : Promise.resolve(value);
        return promiseValue.then(function (value) {
            if (param.isRequired && originalValue !== null && originalValue !== undefined && isValueEmpty) {
                // TODO: handleResultOptions.errorHttpCode = 404; // maybe throw ErrorNotFoundError here?
                var contentType = param.reflectedType && param.reflectedType.name ? param.reflectedType.name : "content";
                var message = param.name ? " with " + param.name + "='" + originalValue + "'" : "";
                return Promise.reject("Requested " + (contentType + message) + " was not found");
            }
            return value;
        });
    };
    // -------------------------------------------------------------------------
    // Private Methods
    // -------------------------------------------------------------------------
    ParamHandler.prototype.handleParamFormat = function (value, param) {
        var format = param.format;
        var formatName = format instanceof Function && format.name ? format.name : format instanceof String ? format : "";
        switch (formatName.toLowerCase()) {
            case "number":
                return +value;
            case "string":
                return value;
            case "boolean":
                if (value === "true") {
                    return true;
                }
                else if (value === "false") {
                    return false;
                }
                return !!value;
            default:
                var isObjectFormat = format instanceof Function || formatName.toLowerCase() === "object";
                if (value && (param.parseJson || isObjectFormat))
                    value = this.parseValue(value, param);
        }
        return value;
    };
    ParamHandler.prototype.parseValue = function (value, paramMetadata) {
        try {
            var parseValue = typeof value === "string" ? JSON.parse(value) : value;
            if (paramMetadata.format !== Object && paramMetadata.format && this.driver.useClassTransformer) {
                var options = paramMetadata.classTransformOptions || this.driver.plainToClassTransformOptions;
                return class_transformer_1.plainToClass(paramMetadata.format, parseValue, options);
            }
            else {
                return parseValue;
            }
        }
        catch (er) {
            // console.log(er);
            throw new ParameterParseJsonError_1.ParameterParseJsonError(paramMetadata.name, value);
        }
    };
    return ParamHandler;
}());
exports.ParamHandler = ParamHandler;

//# sourceMappingURL=ParamHandler.js.map
