{"version":3,"sources":["../../src/metadata-builder/MetadataBuilder.ts"],"names":[],"mappings":"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","file":"MetadataBuilder.js","sourcesContent":["import {defaultMetadataArgsStorage} from \"../index\";\nimport {ControllerMetadata} from \"../metadata/ControllerMetadata\";\nimport {ActionMetadata} from \"../metadata/ActionMetadata\";\nimport {ParamMetadata} from \"../metadata/ParamMetadata\";\nimport {ResponseHandlerMetadata} from \"../metadata/ResponseHandleMetadata\";\nimport {MiddlewareMetadata} from \"../metadata/MiddlewareMetadata\";\nimport {UseMetadata} from \"../metadata/UseMetadata\";\nimport {InterceptorMetadata} from \"../metadata/InterceptorMetadata\";\nimport {UseInterceptorMetadata} from \"../metadata/UseInterceptorMetadata\";\n\n/**\n * Builds metadata from the given metadata arguments.\n */\nexport class MetadataBuilder {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    buildControllerMetadata(classes?: Function[]) {\n        return this.createControllers(classes);\n    }\n\n    buildMiddlewareMetadata(classes?: Function[]) {\n        return this.createMiddlewares(classes);\n    }\n\n    buildInterceptorMetadata(classes?: Function[]) {\n        return this.createInterceptors(classes);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    private createInterceptors(classes?: Function[]): InterceptorMetadata[] {\n        const storage = defaultMetadataArgsStorage();\n        const interceptors = !classes ? storage.interceptors : storage.findInterceptorMetadatasForClasses(classes);\n        return interceptors.map(interceptorArgs => new InterceptorMetadata(interceptorArgs));\n    }\n\n    private createMiddlewares(classes?: Function[]): MiddlewareMetadata[] {\n        const storage = defaultMetadataArgsStorage();\n        const middlewares = !classes ? storage.middlewares : storage.findMiddlewareMetadatasForClasses(classes);\n        return middlewares.map(middlewareArgs => new MiddlewareMetadata(middlewareArgs));\n    }\n    \n    private createControllers(classes?: Function[]): ControllerMetadata[] {\n        const storage = defaultMetadataArgsStorage();\n        const controllers = !classes ? storage.controllers : storage.findControllerMetadatasForClasses(classes);\n        return controllers.map(controllerArgs => {\n            const controller = new ControllerMetadata(controllerArgs);\n            controller.actions = this.createActions(controller);\n            controller.uses = this.createControllerUses(controller);\n            controller.useInterceptors = this.createControllerIntercepts(controller);\n            return controller;\n        });\n    }\n    \n    private createActions(controller: ControllerMetadata): ActionMetadata[] {\n        return defaultMetadataArgsStorage()\n            .findActionsWithTarget(controller.target)\n            .map(actionArgs => {\n                const action = new ActionMetadata(controller, actionArgs);\n                action.params = this.createParams(action);\n                action.responseHandlers = this.createResponseHandlers(action);\n                action.uses = this.createActionUses(action);\n                action.useInterceptors = this.createActionIntercepts(action);\n                return action;\n            });\n    }\n    \n    private createParams(action: ActionMetadata): ParamMetadata[] {\n        return defaultMetadataArgsStorage()\n            .findParamsWithTargetAndMethod(action.target, action.method)\n            .map(paramArgs => new ParamMetadata(action, paramArgs));\n    }\n\n    private createResponseHandlers(action: ActionMetadata): ResponseHandlerMetadata[] {\n        return defaultMetadataArgsStorage()\n            .findResponseHandlersWithTargetAndMethod(action.target, action.method)\n            .map(handlerArgs => new ResponseHandlerMetadata(action, handlerArgs));\n    }\n\n    private createActionUses(action: ActionMetadata): UseMetadata[] {\n        return defaultMetadataArgsStorage()\n            .findUsesWithTargetAndMethod(action.target, action.method)\n            .map(useArgs => new UseMetadata(useArgs));\n    }\n\n    private createActionIntercepts(action: ActionMetadata): UseInterceptorMetadata[] {\n        return defaultMetadataArgsStorage()\n            .findUseInterceptorWithTargetAndMethod(action.target, action.method)\n            .map(interceptArgs => new UseInterceptorMetadata(interceptArgs));\n    }\n\n    private createControllerUses(controller: ControllerMetadata): UseMetadata[] {\n        return defaultMetadataArgsStorage()\n            .findUsesWithTargetAndMethod(controller.target, undefined)\n            .map(useArgs => new UseMetadata(useArgs));\n    }\n\n    private createControllerIntercepts(controller: ControllerMetadata): UseInterceptorMetadata[] {\n        return defaultMetadataArgsStorage()\n            .findUseInterceptorWithTargetAndMethod(controller.target, undefined)\n            .map(interceptArgs => new UseInterceptorMetadata(interceptArgs));\n    }\n\n}"],"sourceRoot":".."}