import { ControllerMetadataArgs } from "../metadata/args/ControllerMetadataArgs";
import { ActionMetadataArgs } from "../metadata/args/ActionMetadataArgs";
import { ParamMetadataArgs } from "../metadata/args/ParamMetadataArgs";
import { ResponseHandlerMetadataArgs } from "../metadata/args/ResponseHandleMetadataArgs";
import { MiddlewareMetadataArgs } from "../metadata/args/MiddlewareMetadataArgs";
import { UseMetadataArgs } from "../metadata/args/UseMetadataArgs";
import { UseInterceptorMetadataArgs } from "../metadata/args/UseInterceptorMetadataArgs";
import { InterceptorMetadataArgs } from "../metadata/args/InterceptorMetadataArgs";
/**
 * Storage all metadatas read from decorators.
 */
export declare class MetadataArgsStorage {
    controllers: ControllerMetadataArgs[];
    middlewares: MiddlewareMetadataArgs[];
    interceptors: InterceptorMetadataArgs[];
    uses: UseMetadataArgs[];
    useInterceptors: UseInterceptorMetadataArgs[];
    actions: ActionMetadataArgs[];
    params: ParamMetadataArgs[];
    responseHandlers: ResponseHandlerMetadataArgs[];
    findMiddlewareMetadatasForClasses(classes: Function[]): MiddlewareMetadataArgs[];
    findInterceptorMetadatasForClasses(classes: Function[]): InterceptorMetadataArgs[];
    findControllerMetadatasForClasses(classes: Function[]): ControllerMetadataArgs[];
    findActionsWithTarget(target: Function): ActionMetadataArgs[];
    findUsesWithTargetAndMethod(target: Function, methodName: string): UseMetadataArgs[];
    findUseInterceptorWithTargetAndMethod(target: Function, methodName: string): UseInterceptorMetadataArgs[];
    findParamsWithTargetAndMethod(target: Function, methodName: string): ParamMetadataArgs[];
    findResponseHandlersWithTargetAndMethod(target: Function, methodName: string): ResponseHandlerMetadataArgs[];
    /**
     * Removes all saved metadata.
     */
    reset(): void;
}
