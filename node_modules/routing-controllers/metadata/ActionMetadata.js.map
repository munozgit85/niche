{"version":3,"sources":["../../src/metadata/ActionMetadata.ts"],"names":[],"mappings":"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","file":"ActionMetadata.js","sourcesContent":["import {ParamMetadata} from \"./ParamMetadata\";\nimport {ActionMetadataArgs} from \"./args/ActionMetadataArgs\";\nimport {ActionType} from \"./types/ActionTypes\";\nimport {ControllerMetadata} from \"./ControllerMetadata\";\nimport {ResponseHandlerMetadata} from \"./ResponseHandleMetadata\";\nimport {ResponseHandlerTypes} from \"./types/ResponsePropertyTypes\";\nimport {UseMetadata} from \"./UseMetadata\";\nimport {ParamTypes} from \"./types/ParamTypes\";\nimport {ClassTransformOptions} from \"class-transformer\";\nimport {UseInterceptorMetadata} from \"./UseInterceptorMetadata\";\n\nexport class ActionMetadata {\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Action's controller.\n     */\n    controllerMetadata: ControllerMetadata;\n\n    /**\n     * Action's parameters.\n     */\n    params: ParamMetadata[];\n\n    /**\n     * Action's use metadatas.\n     */\n    uses: UseMetadata[];\n\n    /**\n     * Action's intercepts.\n     */\n    useInterceptors: UseInterceptorMetadata[];\n\n    /**\n     * Action's response handlers.\n     */\n    responseHandlers: ResponseHandlerMetadata[];\n\n    /**\n     * Route to be registered for the action.\n     */\n    route: string|RegExp;\n\n    /**\n     * Class on which's method this action is attached.\n     */\n    target: Function;\n\n    /**\n     * Object's method that will be executed on this action.\n     */\n    method: string;\n\n    /**\n     * Action type represents http method used for the registered route. Can be one of the value defined in ActionTypes\n     * class.\n     */\n    type: ActionType;\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    \n    constructor(controllerMetadata: ControllerMetadata, args: ActionMetadataArgs) {\n        this.controllerMetadata = controllerMetadata;\n        \n        if (args.route)\n            this.route = args.route;\n        if (args.target)\n            this.target = args.target;\n        if (args.method)\n            this.method = args.method;\n        if (args.type)\n            this.type = args.type;\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    get fullRoute(): string|RegExp {\n        if (this.route instanceof RegExp) {\n            if (this.controllerMetadata.route) {\n                return ActionMetadata.appendBaseRouteToRegexpRoute(this.route as RegExp, this.controllerMetadata.route);\n            }\n            return this.route;\n        }\n\n        let path: string = \"\";\n        if (this.controllerMetadata.route) path += this.controllerMetadata.route;\n        if (this.route && typeof this.route === \"string\") path += this.route;\n        return path;\n    }\n    \n    get isJsonTyped(): boolean {\n        if (this.jsonResponse)\n            return true;\n        if (this.textResponse)\n            return false;\n        return this.controllerMetadata.isJsonTyped;\n    }\n    \n    get contentTypeHandler(): ResponseHandlerMetadata {\n        return this.responseHandlers.find(handler => handler.type === ResponseHandlerTypes.CONTENT_TYPE);\n    }\n    \n    get locationHandler(): ResponseHandlerMetadata {\n        return this.responseHandlers.find(handler => handler.type === ResponseHandlerTypes.LOCATION);\n    }\n    \n    get regirectHandler(): ResponseHandlerMetadata {\n        return this.responseHandlers.find(handler => handler.type === ResponseHandlerTypes.REDIRECT);\n    }\n    \n    get successCodeHandler(): ResponseHandlerMetadata {\n        return this.responseHandlers.find(handler => handler.type === ResponseHandlerTypes.SUCCESS_CODE);\n    }\n    \n    get emptyResultHandler(): ResponseHandlerMetadata {\n        return this.responseHandlers.find(handler => handler.type === ResponseHandlerTypes.EMPTY_RESULT_CODE);\n    }\n    \n    get nullResultHandler(): ResponseHandlerMetadata {\n        return this.responseHandlers.find(handler => handler.type === ResponseHandlerTypes.NULL_RESULT_CODE);\n    }\n    \n    get undefinedResultHandler(): ResponseHandlerMetadata {\n        return this.responseHandlers.find(handler => handler.type === ResponseHandlerTypes.UNDEFINED_RESULT_CODE);\n    }\n    \n    get errorCodeHandler(): ResponseHandlerMetadata {\n        return this.responseHandlers.find(handler => handler.type === ResponseHandlerTypes.ERROR_CODE);\n    }\n    \n    get redirectHandler(): ResponseHandlerMetadata {\n        return this.responseHandlers.find(handler => handler.type === ResponseHandlerTypes.REDIRECT);\n    }\n    \n    get renderedTemplateHandler(): ResponseHandlerMetadata {\n        return this.responseHandlers.find(handler => handler.type === ResponseHandlerTypes.RENDERED_TEMPLATE);\n    }\n    \n    get headerHandlers(): ResponseHandlerMetadata[] {\n        return this.responseHandlers.filter(handler => handler.type === ResponseHandlerTypes.HEADER);\n    }\n\n    get responseClassTransformOptions(): ClassTransformOptions {\n        const responseHandler = this.responseHandlers.find(handler => handler.type === ResponseHandlerTypes.RESPONSE_CLASS_TRANSFORM_OPTIONS);\n        if (responseHandler)\n            return responseHandler.value;\n\n        return undefined;\n    }\n\n    get undefinedResultCode(): number {\n        if (this.undefinedResultHandler)\n            return this.undefinedResultHandler.value;\n\n        return undefined;\n    }\n\n    get nullResultCode(): number {\n        if (this.nullResultHandler)\n            return this.nullResultHandler.value;\n        \n        return undefined;\n    }\n    \n    get emptyResultCode(): number {\n        if (this.emptyResultHandler)\n            return this.emptyResultHandler.value;\n        \n        return undefined;\n    }\n    \n    get successHttpCode(): number {\n        if (this.successCodeHandler)\n            return this.successCodeHandler.value;\n        \n        return undefined;\n    }\n    \n    get headers(): { [name: string]: any } {\n        const headers: { [name: string]: any } = {};\n        if (this.locationHandler)\n            headers[\"Location\"] = this.locationHandler.value;\n        \n        if (this.contentTypeHandler)\n            headers[\"Content-type\"] = this.contentTypeHandler.value;\n        \n        if (this.headerHandlers)\n            this.headerHandlers.map(handler => headers[handler.value] = handler.secondaryValue);\n        \n        return headers;\n    }\n    \n    get redirect() {\n        if (this.redirectHandler)\n            return this.redirectHandler.value;\n\n        return undefined;\n    }\n    \n    get renderedTemplate() {\n        if (this.renderedTemplateHandler)\n            return this.renderedTemplateHandler.value;\n\n        return undefined;\n    }\n    \n    get isCookiesUsed() {\n        return !!this.params.find(param => param.type === ParamTypes.COOKIE);\n    }\n    \n    get isBodyUsed() {\n        return !!this.params.find(param => param.type === ParamTypes.BODY ||  param.type === ParamTypes.BODY_PARAM);\n    }\n    \n    get isFilesUsed() {\n        return !!this.params.find(param => param.type === ParamTypes.UPLOADED_FILES);\n    }\n    \n    get isFileUsed() {\n        return !!this.params.find(param => param.type === ParamTypes.UPLOADED_FILE);\n    }\n\n    /**\n     * If set to true then response will be forced to json (serialized and application/json content-type will be used).\n     */\n    get jsonResponse(): boolean {\n        return !!this.responseHandlers.find(handler => handler.type === ResponseHandlerTypes.JSON_RESPONSE);\n    }\n\n    /**\n     * If set to true then response will be forced to simple string text response.\n     */\n    get textResponse(): boolean {\n        return !!this.responseHandlers.find(handler => handler.type === ResponseHandlerTypes.TEXT_RESPONSE);\n    }\n    \n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    executeAction(params: any[]) {\n        return this.controllerMetadata.instance[this.method].apply(this.controllerMetadata.instance, params);\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n    \n    static appendBaseRouteToRegexpRoute(route: RegExp, baseRoute: string) {\n        if (!baseRoute || baseRoute === \"\") return route;\n        const fullPath = baseRoute.replace(\"\\/\", \"\\\\\\\\/\") + route.toString().substr(1);\n        return new RegExp(fullPath, route.flags);\n    }\n    \n}"],"sourceRoot":".."}