import { ParamMetadata } from "./ParamMetadata";
import { ActionMetadataArgs } from "./args/ActionMetadataArgs";
import { ActionType } from "./types/ActionTypes";
import { ControllerMetadata } from "./ControllerMetadata";
import { ResponseHandlerMetadata } from "./ResponseHandleMetadata";
import { UseMetadata } from "./UseMetadata";
import { ClassTransformOptions } from "class-transformer";
import { UseInterceptorMetadata } from "./UseInterceptorMetadata";
export declare class ActionMetadata {
    /**
     * Action's controller.
     */
    controllerMetadata: ControllerMetadata;
    /**
     * Action's parameters.
     */
    params: ParamMetadata[];
    /**
     * Action's use metadatas.
     */
    uses: UseMetadata[];
    /**
     * Action's intercepts.
     */
    useInterceptors: UseInterceptorMetadata[];
    /**
     * Action's response handlers.
     */
    responseHandlers: ResponseHandlerMetadata[];
    /**
     * Route to be registered for the action.
     */
    route: string | RegExp;
    /**
     * Class on which's method this action is attached.
     */
    target: Function;
    /**
     * Object's method that will be executed on this action.
     */
    method: string;
    /**
     * Action type represents http method used for the registered route. Can be one of the value defined in ActionTypes
     * class.
     */
    type: ActionType;
    constructor(controllerMetadata: ControllerMetadata, args: ActionMetadataArgs);
    readonly fullRoute: string | RegExp;
    readonly isJsonTyped: boolean;
    readonly contentTypeHandler: ResponseHandlerMetadata;
    readonly locationHandler: ResponseHandlerMetadata;
    readonly regirectHandler: ResponseHandlerMetadata;
    readonly successCodeHandler: ResponseHandlerMetadata;
    readonly emptyResultHandler: ResponseHandlerMetadata;
    readonly nullResultHandler: ResponseHandlerMetadata;
    readonly undefinedResultHandler: ResponseHandlerMetadata;
    readonly errorCodeHandler: ResponseHandlerMetadata;
    readonly redirectHandler: ResponseHandlerMetadata;
    readonly renderedTemplateHandler: ResponseHandlerMetadata;
    readonly headerHandlers: ResponseHandlerMetadata[];
    readonly responseClassTransformOptions: ClassTransformOptions;
    readonly undefinedResultCode: number;
    readonly nullResultCode: number;
    readonly emptyResultCode: number;
    readonly successHttpCode: number;
    readonly headers: {
        [name: string]: any;
    };
    readonly redirect: any;
    readonly renderedTemplate: any;
    readonly isCookiesUsed: boolean;
    readonly isBodyUsed: boolean;
    readonly isFilesUsed: boolean;
    readonly isFileUsed: boolean;
    /**
     * If set to true then response will be forced to json (serialized and application/json content-type will be used).
     */
    readonly jsonResponse: boolean;
    /**
     * If set to true then response will be forced to simple string text response.
     */
    readonly textResponse: boolean;
    executeAction(params: any[]): any;
    static appendBaseRouteToRegexpRoute(route: RegExp, baseRoute: string): RegExp;
}
