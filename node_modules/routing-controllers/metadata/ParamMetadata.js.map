{"version":3,"sources":["../../src/metadata/ParamMetadata.ts"],"names":[],"mappings":";AAKA;IA4EI,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E,uBAAY,cAA8B,EAAE,IAAuB;QAC/D,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QAErC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC1B,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QACxC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,SAAS,CAAC;YACzB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAC5B,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;YACV,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;YACV,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;YACZ,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC9B,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;YACf,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QACpC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;YAChB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACtC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;YACf,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;QACpC,EAAE,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC;YAC3B,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,CAAC;QAE5D,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;IAC1C,CAAC;IAOL,oBAAC;AAAD,CA/GA,AA+GC,IAAA;AA/GY,sCAAa","file":"ParamMetadata.js","sourcesContent":["import {ActionMetadata} from \"./ActionMetadata\";\nimport {ParamMetadataArgs} from \"./args/ParamMetadataArgs\";\nimport {ParamTypes} from \"./types/ParamTypes\";\nimport {ClassTransformOptions} from \"class-transformer\";\n\nexport class ParamMetadata {\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Parameter's action.\n     */\n    actionMetadata: ActionMetadata;\n\n    /**\n     * Object on which's method's parameter this parameter is attached.\n     */\n    object: any;\n\n    /**\n     * Method on which's parameter is attached.\n     */\n    method: string;\n\n    /**\n     * Index (# number) of the parameter in the method signature.\n     */\n    index: number;\n\n    /**\n     * Parameter type.\n     */\n    type: ParamTypes;\n\n    /**\n     * Reflected type of the parameter.\n     */\n    reflectedType: any;\n\n    /**\n     * Parameter name.\n     */\n    name: string;\n\n    /**\n     * Parameter format.\n     */\n    format: any;\n\n    /**\n     * Parameter target.\n     */\n    target: any;\n\n    /**\n     * Specifies if parameter should be parsed as json or not.\n     */\n    parseJson: boolean;\n\n    /**\n     * Indicates if this parameter is required or not\n     */\n    isRequired: boolean;\n\n    /**\n     * Transforms the value.\n     */\n    transform: (value?: any, request?: any, response?: any) => Promise<any>|any;\n\n    /**\n     * Additional parameter options. For example it can be uploading options.\n     */\n    extraOptions: any;\n\n    /**\n     * Class transform options used to perform plainToClass operation.\n     */\n    classTransformOptions: ClassTransformOptions;\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    constructor(actionMetadata: ActionMetadata, args: ParamMetadataArgs) {\n        this.actionMetadata = actionMetadata;\n        \n        this.target = args.target;\n        this.method = args.method;\n        this.reflectedType = args.reflectedType;\n        if (args.index !== undefined)\n            this.index = args.index;\n        if (args.type)\n            this.type = args.type;\n        if (args.name)\n            this.name = args.name;\n        if (args.format)\n            this.format = args.format;\n        if (args.parseJson)\n            this.parseJson = args.parseJson;\n        if (args.isRequired)\n            this.isRequired = args.isRequired;\n        if (args.transform)\n            this.transform = args.transform;\n        if (args.classTransformOptions)\n            this.classTransformOptions = args.classTransformOptions;\n        \n        this.extraOptions = args.extraOptions;\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    \n}"],"sourceRoot":".."}