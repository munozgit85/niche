"use strict";
var ResponsePropertyTypes_1 = require("./types/ResponsePropertyTypes");
var ParamTypes_1 = require("./types/ParamTypes");
var ActionMetadata = (function () {
    // -------------------------------------------------------------------------
    // Public Methods
    // -------------------------------------------------------------------------
    function ActionMetadata(controllerMetadata, args) {
        this.controllerMetadata = controllerMetadata;
        if (args.route)
            this.route = args.route;
        if (args.target)
            this.target = args.target;
        if (args.method)
            this.method = args.method;
        if (args.type)
            this.type = args.type;
    }
    Object.defineProperty(ActionMetadata.prototype, "fullRoute", {
        // -------------------------------------------------------------------------
        // Accessors
        // -------------------------------------------------------------------------
        get: function () {
            if (this.route instanceof RegExp) {
                if (this.controllerMetadata.route) {
                    return ActionMetadata.appendBaseRouteToRegexpRoute(this.route, this.controllerMetadata.route);
                }
                return this.route;
            }
            var path = "";
            if (this.controllerMetadata.route)
                path += this.controllerMetadata.route;
            if (this.route && typeof this.route === "string")
                path += this.route;
            return path;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionMetadata.prototype, "isJsonTyped", {
        get: function () {
            if (this.jsonResponse)
                return true;
            if (this.textResponse)
                return false;
            return this.controllerMetadata.isJsonTyped;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionMetadata.prototype, "contentTypeHandler", {
        get: function () {
            return this.responseHandlers.find(function (handler) { return handler.type === ResponsePropertyTypes_1.ResponseHandlerTypes.CONTENT_TYPE; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionMetadata.prototype, "locationHandler", {
        get: function () {
            return this.responseHandlers.find(function (handler) { return handler.type === ResponsePropertyTypes_1.ResponseHandlerTypes.LOCATION; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionMetadata.prototype, "regirectHandler", {
        get: function () {
            return this.responseHandlers.find(function (handler) { return handler.type === ResponsePropertyTypes_1.ResponseHandlerTypes.REDIRECT; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionMetadata.prototype, "successCodeHandler", {
        get: function () {
            return this.responseHandlers.find(function (handler) { return handler.type === ResponsePropertyTypes_1.ResponseHandlerTypes.SUCCESS_CODE; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionMetadata.prototype, "emptyResultHandler", {
        get: function () {
            return this.responseHandlers.find(function (handler) { return handler.type === ResponsePropertyTypes_1.ResponseHandlerTypes.EMPTY_RESULT_CODE; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionMetadata.prototype, "nullResultHandler", {
        get: function () {
            return this.responseHandlers.find(function (handler) { return handler.type === ResponsePropertyTypes_1.ResponseHandlerTypes.NULL_RESULT_CODE; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionMetadata.prototype, "undefinedResultHandler", {
        get: function () {
            return this.responseHandlers.find(function (handler) { return handler.type === ResponsePropertyTypes_1.ResponseHandlerTypes.UNDEFINED_RESULT_CODE; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionMetadata.prototype, "errorCodeHandler", {
        get: function () {
            return this.responseHandlers.find(function (handler) { return handler.type === ResponsePropertyTypes_1.ResponseHandlerTypes.ERROR_CODE; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionMetadata.prototype, "redirectHandler", {
        get: function () {
            return this.responseHandlers.find(function (handler) { return handler.type === ResponsePropertyTypes_1.ResponseHandlerTypes.REDIRECT; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionMetadata.prototype, "renderedTemplateHandler", {
        get: function () {
            return this.responseHandlers.find(function (handler) { return handler.type === ResponsePropertyTypes_1.ResponseHandlerTypes.RENDERED_TEMPLATE; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionMetadata.prototype, "headerHandlers", {
        get: function () {
            return this.responseHandlers.filter(function (handler) { return handler.type === ResponsePropertyTypes_1.ResponseHandlerTypes.HEADER; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionMetadata.prototype, "responseClassTransformOptions", {
        get: function () {
            var responseHandler = this.responseHandlers.find(function (handler) { return handler.type === ResponsePropertyTypes_1.ResponseHandlerTypes.RESPONSE_CLASS_TRANSFORM_OPTIONS; });
            if (responseHandler)
                return responseHandler.value;
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionMetadata.prototype, "undefinedResultCode", {
        get: function () {
            if (this.undefinedResultHandler)
                return this.undefinedResultHandler.value;
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionMetadata.prototype, "nullResultCode", {
        get: function () {
            if (this.nullResultHandler)
                return this.nullResultHandler.value;
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionMetadata.prototype, "emptyResultCode", {
        get: function () {
            if (this.emptyResultHandler)
                return this.emptyResultHandler.value;
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionMetadata.prototype, "successHttpCode", {
        get: function () {
            if (this.successCodeHandler)
                return this.successCodeHandler.value;
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionMetadata.prototype, "headers", {
        get: function () {
            var headers = {};
            if (this.locationHandler)
                headers["Location"] = this.locationHandler.value;
            if (this.contentTypeHandler)
                headers["Content-type"] = this.contentTypeHandler.value;
            if (this.headerHandlers)
                this.headerHandlers.map(function (handler) { return headers[handler.value] = handler.secondaryValue; });
            return headers;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionMetadata.prototype, "redirect", {
        get: function () {
            if (this.redirectHandler)
                return this.redirectHandler.value;
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionMetadata.prototype, "renderedTemplate", {
        get: function () {
            if (this.renderedTemplateHandler)
                return this.renderedTemplateHandler.value;
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionMetadata.prototype, "isCookiesUsed", {
        get: function () {
            return !!this.params.find(function (param) { return param.type === ParamTypes_1.ParamTypes.COOKIE; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionMetadata.prototype, "isBodyUsed", {
        get: function () {
            return !!this.params.find(function (param) { return param.type === ParamTypes_1.ParamTypes.BODY || param.type === ParamTypes_1.ParamTypes.BODY_PARAM; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionMetadata.prototype, "isFilesUsed", {
        get: function () {
            return !!this.params.find(function (param) { return param.type === ParamTypes_1.ParamTypes.UPLOADED_FILES; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionMetadata.prototype, "isFileUsed", {
        get: function () {
            return !!this.params.find(function (param) { return param.type === ParamTypes_1.ParamTypes.UPLOADED_FILE; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionMetadata.prototype, "jsonResponse", {
        /**
         * If set to true then response will be forced to json (serialized and application/json content-type will be used).
         */
        get: function () {
            return !!this.responseHandlers.find(function (handler) { return handler.type === ResponsePropertyTypes_1.ResponseHandlerTypes.JSON_RESPONSE; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActionMetadata.prototype, "textResponse", {
        /**
         * If set to true then response will be forced to simple string text response.
         */
        get: function () {
            return !!this.responseHandlers.find(function (handler) { return handler.type === ResponsePropertyTypes_1.ResponseHandlerTypes.TEXT_RESPONSE; });
        },
        enumerable: true,
        configurable: true
    });
    // -------------------------------------------------------------------------
    // Public Methods
    // -------------------------------------------------------------------------
    ActionMetadata.prototype.executeAction = function (params) {
        return this.controllerMetadata.instance[this.method].apply(this.controllerMetadata.instance, params);
    };
    // -------------------------------------------------------------------------
    // Static Methods
    // -------------------------------------------------------------------------
    ActionMetadata.appendBaseRouteToRegexpRoute = function (route, baseRoute) {
        if (!baseRoute || baseRoute === "")
            return route;
        var fullPath = baseRoute.replace("\/", "\\\\/") + route.toString().substr(1);
        return new RegExp(fullPath, route.flags);
    };
    return ActionMetadata;
}());
exports.ActionMetadata = ActionMetadata;

//# sourceMappingURL=ActionMetadata.js.map
